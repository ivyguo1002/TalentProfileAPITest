{
	"info": {
		"_postman_id": "36581320-95ce-4b29-9917-a93683c5f88c",
		"name": "Talent API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get Token(Run First)",
			"item": [
				{
					"name": "Sign in as talent",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3f6a3fd6-baf2-4564-99b4-7688d287b982",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body includes token\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"token\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check user role\", function () {",
									"    pm.expect(jsonData.token.userRole).to.eql(\"Talent\");",
									"});",
									"",
									"pm.environment.set(\"token_talent\", jsonData.token.token);",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"talent@mvp.studio\",\r\n    \"password\": \"GLobalTalent\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_identity}}/api/auth/signin",
							"host": [
								"{{baseUrl_identity}}"
							],
							"path": [
								"api",
								"auth",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign in as employer",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3f6a3fd6-baf2-4564-99b4-7688d287b982",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body includes token\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"token\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check user role\", function () {",
									"    pm.expect(jsonData.token.userRole).to.eql(\"Employer\");",
									"});",
									"",
									"pm.environment.set(\"token_employer\", jsonData.token.token);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"employer@mvp.studio\",\n    \"password\": \"GLobalTalent\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_identity}}/api/auth/signin",
							"host": [
								"{{baseUrl_identity}}"
							],
							"path": [
								"api",
								"auth",
								"signin"
							]
						}
					},
					"response": []
				},
				{
					"name": "Sign in as recruiter",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3f6a3fd6-baf2-4564-99b4-7688d287b982",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Body includes token\", function () {",
									"    pm.expect(pm.response.text()).to.include(\"token\");",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Check user role\", function () {",
									"    pm.expect(jsonData.token.userRole).to.eql(\"Recruiter\");",
									"});",
									"",
									"pm.environment.set(\"token_recruiter\", jsonData.token.token);",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"recruiter@mvp.studio\",\n    \"password\": \"GLobalTalent\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl_identity}}/api/auth/signin",
							"host": [
								"{{baseUrl_identity}}"
							],
							"path": [
								"api",
								"auth",
								"signin"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7f3214f3-2c69-4ea5-8428-61d63c617b31",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0212bc8d-ed02-43d9-a98a-57d843670382",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Profile",
			"item": [
				{
					"name": "Talent",
					"item": [
						{
							"name": "Profile",
							"item": [
								{
									"name": "Get Profile",
									"item": [
										{
											"name": "Get Talent Profile",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2f04aeb9-f302-4f26-89b0-c6d181441c1c",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has OK\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Content-Type is json\", function () {",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.environment.set(\"id_talent\", jsonData.profile.id);",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "",
														"value": "",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{baseUrl_api}}/api/profile",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get Talent Profile by id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1d7bb641-5f4d-46be-80c7-0340ee008b29",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has OK\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Content-Type is json\", function () {",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "id",
														"type": "text",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/?id=5e606e7014d42500068dc0a",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														""
													],
													"query": [
														{
															"key": "id",
															"value": "5e606e7014d42500068dc0a"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Add Profile",
									"item": [
										{
											"name": "Add a user profile",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c67770f4-84c0-49c7-b296-b0d0f42c10e1",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has OK\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Content-Type is json\", function () {",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Response has success\", function () {",
															"    pm.expect(jsonData.success).to.eql(true);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n        \"id\": \"5e570ec4e0d6254af4bab032\",\r\n        \"firstName\": \"talent\",\r\n        \"middleName\": null,\r\n        \"lastName\": \"MVP\",\r\n        \"username\": \"talent\",\r\n        \"gender\": \"female\",\r\n        \"email\": \"talent@mvp.studio\",\r\n        \"phone\": 123456789,\r\n        \"mobilePhone\": 123456789,\r\n        \"isMobilePhoneVerified\": true,\r\n        \"address\": {\r\n            \"number\": \"\",\r\n            \"street\": \"\",\r\n            \"suburb\": \"\",\r\n            \"postCode\": 0,\r\n            \"city\": \"\",\r\n            \"country\": \"\"\r\n        },\r\n        \"nationality\": null,\r\n        \"visaStatus\": null,\r\n        \"visaExpiryDate\": null,\r\n        \"profilePhoto\": \"start_remove-79a4598a05a77ca999df1dcb434160994b6fde2c3e9101984fb1be0f16d0a74e.png\",\r\n        \"profilePhotoUrl\": \"https://www.remove.bg/assets/start_remove-79a4598a05a77ca999df1dcb434160994b6fde2c3e9101984fb1be0f16d0a74e.png\",\r\n        \"videoName\": null,\r\n        \"videoUrl\": \"\",\r\n        \"cvName\": null,\r\n        \"cvUrl\": \"\",\r\n        \"summary\": \"asdsd3dd111...................\",\r\n        \"description\": null,\r\n        \"linkedAccounts\": [],\r\n        \"jobSeekingStatus\": {\r\n            \"status\": \"Open to opportunity\",\r\n            \"availableDate\": null\r\n        },\r\n        \"languages\": [],\r\n        \"skills\": [],\r\n        \"educations\": [\r\n            {\r\n                \"country\": \"123\",\r\n                \"instituteName\": \"1230000wq\",\r\n                \"title\": \"12312\",\r\n                \"degree\": \"23\",\r\n                \"graduationOn\": \"0001-01-01T00:00:00\",\r\n                \"startOn\": \"0001-01-01T00:00:00\",\r\n                \"id\": \"5e587ee4abadcd4b18eb3299\",\r\n                \"studyPeriod\": {\r\n                    \"from\": \"2020-07-28T03:45:15.835Z\",\r\n                    \"end\": \"2020-09-28T03:45:33.279Z\"\r\n                }\r\n            },\r\n            {\r\n                \"country\": \"123\",\r\n                \"instituteName\": \"2132\",\r\n                \"title\": \"123\",\r\n                \"degree\": \"123\",\r\n                \"graduationOn\": \"0001-01-01T00:00:00\",\r\n                \"startOn\": \"0001-01-01T00:00:00\",\r\n                \"id\": \"5e5883441652655de0da0060\",\r\n                \"studyPeriod\": {\r\n                    \"from\": \"2020-04-28T04:03:40.847Z\",\r\n                    \"end\": \"2020-05-28T04:03:42.365Z\"\r\n                }\r\n            },\r\n            {\r\n                \"country\": \"qwe\",\r\n                \"instituteName\": \"wqe\",\r\n                \"title\": \"qwe\",\r\n                \"degree\": \"qwe2222\",\r\n                \"graduationOn\": \"0001-01-01T00:00:00\",\r\n                \"startOn\": \"0001-01-01T00:00:00\",\r\n                \"id\": \"5e5c932a61d85e21487a09d8\",\r\n                \"studyPeriod\": {\r\n                    \"from\": \"2020-10-02T06:01:25.665Z\",\r\n                    \"end\": \"2020-12-02T05:01:26.937Z\"\r\n                }\r\n            }\r\n        ],\r\n        \"certifications\": [],\r\n        \"experiences\": []\r\n    }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a user profile without body",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ba200120-1f58-4bcd-ab8d-e1b3b17f6521",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Status code name has Bad Request\", function () {",
															"    pm.response.to.have.status(\"Bad Request\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a user profile without authorization",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ba200120-1f58-4bcd-ab8d-e1b3b17f6521",
														"exec": [
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"",
															"pm.test(\"Status code name has Unauthorized\", function () {",
															"    pm.response.to.have.status(\"Unauthorized\");",
															"});",
															"",
															"pm.test(\"WWW-Authenticate is present\", function () {",
															"    pm.response.to.have.header(\"WWW-Authenticate\");",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a user profile without permission",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ba200120-1f58-4bcd-ab8d-e1b3b17f6521",
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Status code name has Forbidden\", function () {",
															"    pm.response.to.have.status(\"Forbidden\");",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token_employer}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Add Primary Contact",
									"item": [
										{
											"name": "Update primary info",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c67770f4-84c0-49c7-b296-b0d0f42c10e1",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has OK\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Content-Type is json\", function () {",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Response has success\", function () {",
															"    pm.expect(jsonData.success).to.eql(true);",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n        \"id\": \"{{id_talent}}\",\r\n        \"firstName\": \"{{firstName}}\",\r\n        \"middleName\": \"{{middleName}}\",\r\n        \"lastName\": \"{{lastName}}\",\r\n        \"username\": null,\r\n        \"gender\": \"{{gender}}\",\r\n        \"email\": \"{{email}}\",\r\n        \"phone\": {{phone}},\r\n        \"mobilePhone\": {{mobilePhone}},\r\n        \"isMobilePhoneVerified\": {{isMobilePhoneVerified}},\r\n        \"address\": {\r\n            \"number\": \"\",\r\n            \"street\": \"\",\r\n            \"suburb\": \"\",\r\n            \"postCode\": 0,\r\n            \"city\": \"\",\r\n            \"country\": \"\"\r\n        },\r\n        \"nationality\": \"{{nationality}}\",\r\n        \"visaStatus\": \"{{visaStatus}}\",\r\n        \"visaExpiryDate\": \"{{visaExpiryDate}}\",\r\n        \"profilePhoto\": null,\r\n        \"profilePhotoUrl\": \"\",\r\n        \"videoName\": null,\r\n        \"videoUrl\": \"\",\r\n        \"cvName\": null,\r\n        \"cvUrl\": \"\",\r\n        \"summary\": null,\r\n        \"description\": null,\r\n        \"linkedAccounts\": [],\r\n        \"jobSeekingStatus\": {},\r\n        \"languages\": [],\r\n        \"skills\": [],\r\n        \"educations\": [],\r\n        \"certifications\": [],\r\n        \"experiences\": []\r\n    }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check if primary info is correct",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2f04aeb9-f302-4f26-89b0-c6d181441c1c",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has OK\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Content-Type is json\", function () {",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Check if the primary info is correct\", function () {",
															"    pm.expect(jsonData.profile.firstName).to.eql(pm.collectionVariables.get(\"firstName\"));",
															"    pm.expect(jsonData.profile.middleName).to.eql(pm.collectionVariables.get(\"middleName\"));",
															"    pm.expect(jsonData.profile.lastName).to.eql(pm.collectionVariables.get(\"lastName\"));",
															"    pm.expect(jsonData.profile.username).to.eql(pm.collectionVariables.get(\"firstName\"));",
															"    pm.expect(jsonData.profile.gender).to.eql(pm.collectionVariables.get(\"gender\"));",
															"    pm.expect(jsonData.profile.email).to.eql(pm.collectionVariables.get(\"email\"));",
															"    pm.expect(jsonData.profile.phone).to.eql(pm.collectionVariables.get(\"phone\"));",
															"    pm.expect(jsonData.profile.mobilePhone).to.eql(pm.collectionVariables.get(\"mobilePhone\"));",
															"    pm.expect(jsonData.profile.isMobilePhoneVerified).to.eql(Boolean(pm.collectionVariables.get(\"isMobilePhoneVerified\")));",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "",
														"type": "text",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl_api}}/api/profile",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update address with invalid postcode",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c67770f4-84c0-49c7-b296-b0d0f42c10e1",
														"exec": [
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"pm.test(\"Status code name has Bad Request\", function () {",
															"    pm.response.to.have.status(\"Bad Request\");",
															"});",
															"",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n        \"id\": \"{{id_talent}}\",\r\n        \"firstName\": \"talent\",\r\n        \"middleName\": null,\r\n        \"lastName\": \"Mvp\",\r\n        \"username\": null,\r\n        \"gender\": null,\r\n        \"email\": \"talent@mvp.studio\",\r\n        \"phone\": null,\r\n        \"mobilePhone\": null,\r\n        \"isMobilePhoneVerified\": true,\r\n        \"address\": {\r\n            \"number\": \"{{address_number}}\",\r\n            \"street\": \"{{address_street}}\",\r\n            \"suburb\": \"{{address_suburb}}\",\r\n            \"postCode\": \"abc\",\r\n            \"city\": \"{{address_city}}\",\r\n            \"country\": \"{{address_country}}\"\r\n        },\r\n        \"nationality\": null,\r\n        \"visaStatus\": null,\r\n        \"visaExpiryDate\": null,\r\n        \"profilePhoto\": null,\r\n        \"profilePhotoUrl\": \"\",\r\n        \"videoName\": null,\r\n        \"videoUrl\": \"\",\r\n        \"cvName\": null,\r\n        \"cvUrl\": \"\",\r\n        \"summary\": null,\r\n        \"description\": null,\r\n        \"linkedAccounts\": [],\r\n        \"jobSeekingStatus\": {},\r\n        \"languages\": [],\r\n        \"skills\": [],\r\n        \"educations\": [],\r\n        \"certifications\": [],\r\n        \"experiences\": []\r\n    }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update address",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c67770f4-84c0-49c7-b296-b0d0f42c10e1",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has OK\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Content-Type is json\", function () {",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Response has success\", function () {",
															"    pm.expect(jsonData.success).to.eql(true);",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n        \"id\": \"{{id_talent}}\",\r\n        \"firstName\": \"talent\",\r\n        \"middleName\": null,\r\n        \"lastName\": \"Mvp\",\r\n        \"username\": null,\r\n        \"gender\": null,\r\n        \"email\": \"talent@mvp.studio\",\r\n        \"phone\": null,\r\n        \"mobilePhone\": null,\r\n        \"isMobilePhoneVerified\": true,\r\n        \"address\": {\r\n            \"number\": \"{{address_number}}\",\r\n            \"street\": \"{{address_street}}\",\r\n            \"suburb\": \"{{address_suburb}}\",\r\n            \"postCode\": {{address_postCode}},\r\n            \"city\": \"{{address_city}}\",\r\n            \"country\": \"{{address_country}}\"\r\n        },\r\n        \"nationality\": null,\r\n        \"visaStatus\": null,\r\n        \"visaExpiryDate\": null,\r\n        \"profilePhoto\": null,\r\n        \"profilePhotoUrl\": \"\",\r\n        \"videoName\": null,\r\n        \"videoUrl\": \"\",\r\n        \"cvName\": null,\r\n        \"cvUrl\": \"\",\r\n        \"summary\": null,\r\n        \"description\": null,\r\n        \"linkedAccounts\": [],\r\n        \"jobSeekingStatus\": {},\r\n        \"languages\": [],\r\n        \"skills\": [],\r\n        \"educations\": [],\r\n        \"certifications\": [],\r\n        \"experiences\": []\r\n    }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check if address is correct",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2f04aeb9-f302-4f26-89b0-c6d181441c1c",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has OK\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Content-Type is json\", function () {",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Check if address is correct\", function () {",
															"    pm.expect(jsonData.profile.address.number).to.eql(pm.collectionVariables.get(\"address_number\"));",
															"    pm.expect(jsonData.profile.address.street).to.eql(pm.collectionVariables.get(\"address_street\"));",
															"    pm.expect(jsonData.profile.address.suburb).to.eql(pm.collectionVariables.get(\"address_suburb\"));",
															"    pm.expect(jsonData.profile.address.city).to.eql(pm.collectionVariables.get(\"address_city\"));",
															"    pm.expect(jsonData.profile.address.country).to.eql(pm.collectionVariables.get(\"address_country\"));",
															"    pm.expect(jsonData.profile.address.postCode).to.eql(Number(pm.collectionVariables.get(\"address_postCode\")));",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "",
														"type": "text",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl_api}}/api/profile",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update social accounts",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c67770f4-84c0-49c7-b296-b0d0f42c10e1",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has OK\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Content-Type is json\", function () {",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Response has success\", function () {",
															"    pm.expect(jsonData.success).to.eql(true);",
															"});",
															"",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n        \"id\": \"{{id_talent}}\",\r\n        \"firstName\": \"{{firstName}}\",\r\n        \"middleName\": \"{{middleName}}\",\r\n        \"lastName\": \"{{lastName}}\",\r\n        \"username\": null,\r\n        \"gender\": \"{{gender}}\",\r\n        \"email\": \"{{email}}\",\r\n        \"phone\": {{phone}},\r\n        \"mobilePhone\": {{mobilePhone}},\r\n        \"isMobilePhoneVerified\": {{isMobilePhoneVerified}},\r\n        \"address\": {\r\n            \"number\": \"{{address_number}}\",\r\n            \"street\": \"{{address_street}}\",\r\n            \"suburb\": \"{{address_suburb}}\",\r\n            \"postCode\": {{address_postCode}},\r\n            \"city\": \"{{address_city}}\",\r\n            \"country\": \"{{address_country}}\"\r\n        },\r\n        \"nationality\": \"{{nationality}}\",\r\n        \"visaStatus\": \"{{visaStatus}}\",\r\n        \"visaExpiryDate\": \"{{visaExpiryDate}}\",\r\n        \"profilePhoto\": null,\r\n        \"profilePhotoUrl\": \"\",\r\n        \"videoName\": null,\r\n        \"videoUrl\": \"\",\r\n        \"cvName\": null,\r\n        \"cvUrl\": \"\",\r\n        \"summary\": null,\r\n        \"description\": null,\r\n        \"linkedAccounts\": [\r\n        {\r\n    \t\t\"organisation\": \"{{linkedAccounts_organisation}}\",\r\n    \t\t\"token\": \"\",\r\n    \t\t\"url\": \"{{linkedAccounts_url}}\",\r\n    \t\t\"linkedTime\": \"{{linkedAccounts_linkedTime}}\"\r\n    \t}],\r\n        \"jobSeekingStatus\": {},\r\n        \"languages\": [],\r\n        \"skills\": [],\r\n        \"educations\": [],\r\n        \"certifications\": [],\r\n        \"experiences\": []\r\n    }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check if social account is correct",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2f04aeb9-f302-4f26-89b0-c6d181441c1c",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has OK\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Content-Type is json\", function () {",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Check if linked account is correct\", function () {",
															"    pm.expect(jsonData.profile.linkedAccounts[0].organisation).to.eql(pm.collectionVariables.get(\"linkedAccounts_organisation\"));",
															"    pm.expect(jsonData.profile.linkedAccounts[0].url).to.eql(pm.collectionVariables.get(\"linkedAccounts_url\"));",
															"    pm.expect(jsonData.profile.linkedAccounts[0].linkedTime).to.eql(pm.collectionVariables.get(\"linkedAccounts_linkedTime\"));",
															"",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "",
														"type": "text",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl_api}}/api/profile",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d5cbc351-4052-4a87-b69a-f0600a88cc36",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "857477fe-4af9-4bed-afe8-4e7d3f9f6883",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Languages",
							"item": [
								{
									"name": "Add language",
									"item": [
										{
											"name": "Add a language",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															"\r",
															"pm.test(\"Response includes property id\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"id\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"id_language\", jsonData.id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"name\": \"{{language_name}}\",\r\n  \"level\": \"{{language_level}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/languages\n",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"languages\n"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a duplicated language",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has BadRequest\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Message is Duplicated\", function () {\r",
															"    pm.expect(jsonData.message).to.include(\"Duplicated\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"name\": \"{{language_name}}\",\r\n  \"level\": \"Conversational\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/languages",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"languages"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a language without body",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has BadRequest\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/languages\n",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"languages\n"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a language with invalid body",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has BadRequest\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"name1\": \"{{language_name}}\",\r\n  \"level\": \"{{language_level}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/languages\n",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"languages\n"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a language without authorization",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"",
															"pm.test(\"Status code name has Unauthorized\", function () {",
															"    pm.response.to.have.status(\"Unauthorized\");",
															"});",
															"",
															"pm.test(\"WWW-Authenticate is present\", function () {",
															"    pm.response.to.have.header(\"WWW-Authenticate\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/languages\n",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"languages\n"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a language without permission",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Status code name has Forbidden\", function () {",
															"    pm.response.to.have.status(\"Forbidden\");",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token_employer}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/languages\n",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"languages\n"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Update Language",
									"item": [
										{
											"name": "Update the language",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "397d058f-2556-48c3-94bd-9b41fa9edb6e",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"id\":\"{{id_language}}\",\n\t\"name\":\"{{language_name_updated}}\",\n\t\"level\":\"{{language_level_updated}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/languages\n",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"languages\n"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a language",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															"\r",
															"pm.test(\"Response includes property id\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"id\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"id_language\", jsonData.id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"name\": \"{{language_name}}\",\r\n  \"level\": \"{{language_level}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/languages\n",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"languages\n"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the language without editing",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "397d058f-2556-48c3-94bd-9b41fa9edb6e",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"id\":\"{{id_language}}\",\n\t\"name\":\"{{language_name}}\",\n\t\"level\":\"{{lanuage_level}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/languages\n",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"languages\n"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the language to be duplicated",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "397d058f-2556-48c3-94bd-9b41fa9edb6e",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has Bad Request\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															"\r",
															"pm.test(\"Message is Duplicated\", function () {\r",
															"    pm.expect(jsonData.message).to.include(\"Duplicated\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"id\":\"{{id_language}}\",\n\t\"name\":\"{{language_name_updated}}\",\n\t\"level\":\"Conversational\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/languages\n",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"languages\n"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the language with non-existed id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has Bad Request\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"id\":\"5e61f86\",\n\t\"name\":\"{{language_name}}\",\n\t\"level\":\"{{language_level}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/languages\n",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"languages\n"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the language with invalid body",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has Bad Request\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"id\":\"{{id_language}}\",\n\t\"name1\":\"{{language_name}}\",\n\t\"level1\":\"{{language_level}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/languages\n",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"languages\n"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the language without body",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has Bad Request\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/languages\n",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"languages\n"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the language without authorization",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "397d058f-2556-48c3-94bd-9b41fa9edb6e",
														"exec": [
															"pm.test(\"Status code is 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has Unauthorized\", function () {\r",
															"    pm.response.to.have.status(\"Unauthorized\");\r",
															"});\r",
															"\r",
															"pm.test(\"WWW-Authenticate is present\", function () {\r",
															"    pm.response.to.have.header(\"WWW-Authenticate\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/languages\n",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"languages\n"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the language without permission",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "397d058f-2556-48c3-94bd-9b41fa9edb6e",
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has Forbidden\", function () {\r",
															"    pm.response.to.have.status(\"Forbidden\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token_employer}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/languages\n",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"languages\n"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Get language",
									"item": [
										{
											"name": "Get the languages",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e838b6a5-5f98-470c-b559-d31350299c90",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has OK\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Content-Type is json\", function () {",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
															"});",
															"",
															"//Need add validation when the implementation finished"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/languages\n",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"languages\n"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get the languages without authorization",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e838b6a5-5f98-470c-b559-d31350299c90",
														"exec": [
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"",
															"pm.test(\"Status code name has Unauthorized\", function () {",
															"    pm.response.to.have.status(\"Unauthorized\");",
															"});",
															"",
															"pm.test(\"WWW-Authenticate is present\", function () {",
															"    pm.response.to.have.header(\"WWW-Authenticate\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/languages\n",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"languages\n"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get the languages without permission",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e838b6a5-5f98-470c-b559-d31350299c90",
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Status code name has Forbidden\", function () {",
															"    pm.response.to.have.status(\"Forbidden\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token_employer}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/languages\n",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"languages\n"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Delete language",
									"item": [
										{
											"name": "Delete the language",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3600297f-a0f4-44e9-89b6-7577fd82d86c",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/languages?id={{id_language}}",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"languages"
													],
													"query": [
														{
															"key": "id",
															"value": "{{id_language}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete the language with non-existed id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3600297f-a0f4-44e9-89b6-7577fd82d86c",
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has Not Found\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/languages?id=5e65882bea35f800",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"languages"
													],
													"query": [
														{
															"key": "id",
															"value": "5e65882bea35f800"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete the language without id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3600297f-a0f4-44e9-89b6-7577fd82d86c",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has Bad Request\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/languages\n",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"languages\n"
													],
													"query": [
														{
															"key": "id",
															"value": "5e57b756a30546",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete the language without autorization",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3600297f-a0f4-44e9-89b6-7577fd82d86c",
														"exec": [
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"",
															"pm.test(\"Status code name has Unauthorized\", function () {",
															"    pm.response.to.have.status(\"Unauthorized\");",
															"});",
															"",
															"pm.test(\"WWW-Authenticate is present\", function () {",
															"    pm.response.to.have.header(\"WWW-Authenticate\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/languages?id={{id_language}}",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"languages"
													],
													"query": [
														{
															"key": "id",
															"value": "{{id_language}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete the language without permission",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3600297f-a0f4-44e9-89b6-7577fd82d86c",
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Status code name has Forbidden\", function () {",
															"    pm.response.to.have.status(\"Forbidden\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token_employer}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/languages?id={{id_language}}",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"languages"
													],
													"query": [
														{
															"key": "id",
															"value": "{{id_language}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "CRUD",
									"item": [
										{
											"name": "Clear profile data",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c67770f4-84c0-49c7-b296-b0d0f42c10e1",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has OK\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Content-Type is json\", function () {",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Response has success\", function () {",
															"    pm.expect(jsonData.success).to.eql(true);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n        \"id\": \"{{id_talent}}\",\r\n        \"firstName\": \"talent\",\r\n        \"middleName\": null,\r\n        \"lastName\": \"MVP\",\r\n        \"username\": \"talent\",\r\n        \"gender\": null,\r\n        \"email\": \"talent@mvp.studio\",\r\n        \"phone\": null,\r\n        \"mobilePhone\":null,\r\n        \"isMobilePhoneVerified\": true,\r\n        \"address\": {\r\n            \"number\": \"\",\r\n            \"street\": \"\",\r\n            \"suburb\": \"\",\r\n            \"postCode\": 0,\r\n            \"city\": \"\",\r\n            \"country\": \"\"\r\n        },\r\n        \"nationality\": null,\r\n        \"visaStatus\": null,\r\n        \"visaExpiryDate\": null,\r\n        \"profilePhoto\": \"start_remove-79a4598a05a77ca999df1dcb434160994b6fde2c3e9101984fb1be0f16d0a74e.png\",\r\n        \"profilePhotoUrl\": \"https://www.remove.bg/assets/start_remove-79a4598a05a77ca999df1dcb434160994b6fde2c3e9101984fb1be0f16d0a74e.png\",\r\n        \"videoName\": null,\r\n        \"videoUrl\": \"\",\r\n        \"cvName\": null,\r\n        \"cvUrl\": \"\",\r\n        \"summary\": null,\r\n        \"description\": null,\r\n        \"linkedAccounts\": [],\r\n        \"jobSeekingStatus\": {},\r\n        \"languages\": [],\r\n        \"skills\": [],\r\n        \"educations\": [],\r\n        \"certifications\": [],\r\n        \"experiences\": []\r\n    }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a language",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															"\r",
															"pm.test(\"Response includes property id\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"id\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"id_language\", jsonData.id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"name\": \"{{language_name}}\",\r\n  \"level\": \"{{language_level}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/languages\n",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"languages\n"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check if language has been  added successfully",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2f04aeb9-f302-4f26-89b0-c6d181441c1c",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has OK\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Content-Type is json\", function () {",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Check if language has been  added successfully\", function () {",
															"    pm.expect(jsonData.profile.languages[0].name).to.eql(pm.collectionVariables.get(\"language_name\"));",
															"    pm.expect(jsonData.profile.languages[0].level).to.eql(pm.collectionVariables.get(\"language_level\"));",
															"    pm.expect(jsonData.profile.languages[0].id).to.eql(pm.collectionVariables.get(\"id_language\"));",
															"",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "",
														"type": "text",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl_api}}/api/profile",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the language",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "397d058f-2556-48c3-94bd-9b41fa9edb6e",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"id\":\"{{id_language}}\",\n\t\"name\":\"{{language_name_updated}}\",\n\t\"level\":\"{{language_level_updated}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/languages\n",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"languages\n"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check if language has been  updated successfully",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2f04aeb9-f302-4f26-89b0-c6d181441c1c",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has OK\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Content-Type is json\", function () {",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Check if language has been updated successfully\", function () {",
															"    pm.expect(jsonData.profile.languages[0].name).to.eql(pm.collectionVariables.get(\"language_name_updated\"));",
															"    pm.expect(jsonData.profile.languages[0].level).to.eql(pm.collectionVariables.get(\"language_level_updated\"));",
															"    pm.expect(jsonData.profile.languages[0].id).to.eql(pm.collectionVariables.get(\"id_language\"));",
															"",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "",
														"type": "text",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl_api}}/api/profile",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete the language",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3600297f-a0f4-44e9-89b6-7577fd82d86c",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/languages?id={{id_language}}",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"languages"
													],
													"query": [
														{
															"key": "id",
															"value": "{{id_language}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Check if language has been  deleted successfully",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2f04aeb9-f302-4f26-89b0-c6d181441c1c",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has OK\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Content-Type is json\", function () {",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Check if language has been deleted successfully\", function () {",
															"    pm.expect(jsonData.profile.languages).to.be.an('array').that.is.empty",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "",
														"type": "text",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl_api}}/api/profile",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Skills",
							"item": [
								{
									"name": "Add skill",
									"item": [
										{
											"name": "Add a skill",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															"\r",
															"pm.test(\"Response includes property id\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"id\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"id_skill\", jsonData.id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"name\":\"{{skill_name}}\",\n\t\"level\":\"{{skill_level}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/skills",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"skills"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a duplicated skill",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has BadRequest\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															"\r",
															"pm.test(\"Message is Duplicated\", function () {\r",
															"    pm.expect(jsonData.message).to.include(\"Duplicated\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"name\":\"{{skill_name}}\",\n\t\"level\":\"Intermediate\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/skills",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"skills"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a skill without body",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has BadRequest\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/skills",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"skills"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a skill with invalid body",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"name1\":\"{{skill_name}}\",\n\t\"level1\":\"{{skill_level}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/skills",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"skills"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a skill without authorization",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"",
															"pm.test(\"Status code name has Unauthorized\", function () {",
															"    pm.response.to.have.status(\"Unauthorized\");",
															"});",
															"",
															"pm.test(\"WWW-Authenticate is present\", function () {",
															"    pm.response.to.have.header(\"WWW-Authenticate\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/skills",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"skills"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a skill without permission",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Status code name has Forbidden\", function () {",
															"    pm.response.to.have.status(\"Forbidden\");",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token_employer}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/skills",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"skills"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Update skill",
									"item": [
										{
											"name": "Update the skill",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "397d058f-2556-48c3-94bd-9b41fa9edb6e",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"id\":\"{{id_skill}}\",\n\t\"name\":\"{{skill_name_updated}}\",\n\t\"level\":\"{{skill_level_updated}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/skills",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"skills"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a skill",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															"\r",
															"pm.test(\"Response includes property id\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"id\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"id_skill\", jsonData.id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"name\":\"{{skill_name}}\",\n\t\"level\":\"{{skill_level}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/skills",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"skills"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the skill without editing",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "397d058f-2556-48c3-94bd-9b41fa9edb6e",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"id\":\"{{id_skill}}\",\n\t\"name\":\"{{skill_name}}\",\n\t\"level\":\"{{skill_level}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/skills",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"skills"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the skill to be duplicated",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "397d058f-2556-48c3-94bd-9b41fa9edb6e",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has BadRequest\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															"\r",
															"pm.test(\"Message is Duplicated\", function () {\r",
															"    pm.expect(jsonData.message).to.include(\"Duplicated\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"id\":\"{{id_skill}}\",\n\t\"name\":\"{{skill_name_updated}}\",\n\t\"level\":\"Intermediate\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/skills",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"skills"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the skill with non-existed id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has BadRequest\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"id\":\"5e61f86\",\n\t\"name\":\"{{skill_name}}\",\n\t\"level\":\"{{skill_level}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/skills",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"skills"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the skill without body",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has BadRequest\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/skills",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"skills"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the skill with invalid body",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has BadRequest\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"id\":\"{{id_skill}}\",\n\t\"name1\":\"{{skill_name}}\",\n\t\"level1\":\"{{skill_level}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/skills",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"skills"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the skill without authorization",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "397d058f-2556-48c3-94bd-9b41fa9edb6e",
														"exec": [
															"pm.test(\"Status code is 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has Unauthorized\", function () {\r",
															"    pm.response.to.have.status(\"Unauthorized\");\r",
															"});\r",
															"\r",
															"pm.test(\"WWW-Authenticate is present\", function () {\r",
															"    pm.response.to.have.header(\"WWW-Authenticate\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/skills",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"skills"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the skill without permission",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "397d058f-2556-48c3-94bd-9b41fa9edb6e",
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has Forbidden\", function () {\r",
															"    pm.response.to.have.status(\"Forbidden\");\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token_employer}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/skills",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"skills"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Get skill",
									"item": [
										{
											"name": "Get the skills",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e838b6a5-5f98-470c-b559-d31350299c90",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Content-Type is json\", function () {",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
															"});",
															"",
															"var skills = pm.response.json();",
															"",
															"//Need add validation after implemented",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/skills",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"skills"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get the skills without authorization",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e838b6a5-5f98-470c-b559-d31350299c90",
														"exec": [
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"",
															"pm.test(\"Status code name has Unauthorized\", function () {",
															"    pm.response.to.have.status(\"Unauthorized\");",
															"});",
															"",
															"pm.test(\"WWW-Authenticate is present\", function () {",
															"    pm.response.to.have.header(\"WWW-Authenticate\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/skills",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"skills"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get the skills without permission",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e838b6a5-5f98-470c-b559-d31350299c90",
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Status code name has Forbidden\", function () {",
															"    pm.response.to.have.status(\"Forbidden\");",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token_employer}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/skills",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"skills"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Delete skill",
									"item": [
										{
											"name": "Delete the skill",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3600297f-a0f4-44e9-89b6-7577fd82d86c",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/skills?id={{id_skill}}",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"skills"
													],
													"query": [
														{
															"key": "id",
															"value": "{{id_skill}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete the skill with non-existed id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3600297f-a0f4-44e9-89b6-7577fd82d86c",
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has Bad Request\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"    \r",
															"});pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/skills?id=5e57b756a30546",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"skills"
													],
													"query": [
														{
															"key": "id",
															"value": "5e57b756a30546"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete the skill without id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3600297f-a0f4-44e9-89b6-7577fd82d86c",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has Bad Request\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"    \r",
															"});pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/skills",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"skills"
													],
													"query": [
														{
															"key": "id",
															"value": "5e57b756a30546",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete the skill without autorization",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3600297f-a0f4-44e9-89b6-7577fd82d86c",
														"exec": [
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"",
															"pm.test(\"Status code name has Unauthorized\", function () {",
															"    pm.response.to.have.status(\"Unauthorized\");",
															"});",
															"",
															"pm.test(\"WWW-Authenticate is present\", function () {",
															"    pm.response.to.have.header(\"WWW-Authenticate\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/skills?id={{id_skill}}",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"skills"
													],
													"query": [
														{
															"key": "id",
															"value": "{{id_skill}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete the skill witout permission",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3600297f-a0f4-44e9-89b6-7577fd82d86c",
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Status code name has Forbidden\", function () {",
															"    pm.response.to.have.status(\"Forbidden\");",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token_employer}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/skills?id={{id_skill}}",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"skills"
													],
													"query": [
														{
															"key": "id",
															"value": "{{id_skill}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "CRUD",
									"item": [
										{
											"name": "Clear profile data",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c67770f4-84c0-49c7-b296-b0d0f42c10e1",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has OK\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Content-Type is json\", function () {",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Response has success\", function () {",
															"    pm.expect(jsonData.success).to.eql(true);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n        \"id\": \"{{id_talent}}\",\r\n        \"firstName\": \"talent\",\r\n        \"middleName\": null,\r\n        \"lastName\": \"MVP\",\r\n        \"username\": \"talent\",\r\n        \"gender\": null,\r\n        \"email\": \"talent@mvp.studio\",\r\n        \"phone\": null,\r\n        \"mobilePhone\":null,\r\n        \"isMobilePhoneVerified\": true,\r\n        \"address\": {\r\n            \"number\": \"\",\r\n            \"street\": \"\",\r\n            \"suburb\": \"\",\r\n            \"postCode\": 0,\r\n            \"city\": \"\",\r\n            \"country\": \"\"\r\n        },\r\n        \"nationality\": null,\r\n        \"visaStatus\": null,\r\n        \"visaExpiryDate\": null,\r\n        \"profilePhoto\": \"start_remove-79a4598a05a77ca999df1dcb434160994b6fde2c3e9101984fb1be0f16d0a74e.png\",\r\n        \"profilePhotoUrl\": \"https://www.remove.bg/assets/start_remove-79a4598a05a77ca999df1dcb434160994b6fde2c3e9101984fb1be0f16d0a74e.png\",\r\n        \"videoName\": null,\r\n        \"videoUrl\": \"\",\r\n        \"cvName\": null,\r\n        \"cvUrl\": \"\",\r\n        \"summary\": null,\r\n        \"description\": null,\r\n        \"linkedAccounts\": [],\r\n        \"jobSeekingStatus\": {},\r\n        \"languages\": [],\r\n        \"skills\": [],\r\n        \"educations\": [],\r\n        \"certifications\": [],\r\n        \"experiences\": []\r\n    }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a skill",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															"\r",
															"pm.test(\"Response includes property id\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"id\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"id_skill\", jsonData.id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"name\":\"{{skill_name}}\",\n\t\"level\":\"{{skill_level}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/skills",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"skills"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check if skill has been  added successfully",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2f04aeb9-f302-4f26-89b0-c6d181441c1c",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has OK\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Content-Type is json\", function () {",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Check if skill has been  added successfully\", function () {",
															"    pm.expect(jsonData.profile.skills[0].name).to.eql(pm.collectionVariables.get(\"skill_name\"));",
															"    pm.expect(jsonData.profile.skills[0].level).to.eql(pm.collectionVariables.get(\"skill_level\"));",
															"    pm.expect(jsonData.profile.skills[0].id).to.eql(pm.collectionVariables.get(\"id_skill\"));",
															"",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "",
														"type": "text",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl_api}}/api/profile",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the skill",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "397d058f-2556-48c3-94bd-9b41fa9edb6e",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n\t\"id\":\"{{id_skill}}\",\n\t\"name\":\"{{skill_name_updated}}\",\n\t\"level\":\"{{skill_level_updated}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/skills",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"skills"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check if skill has been  updated successfully",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2f04aeb9-f302-4f26-89b0-c6d181441c1c",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has OK\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Content-Type is json\", function () {",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Check if skill has been updated successfully\", function () {",
															"    pm.expect(jsonData.profile.skills[0].name).to.eql(pm.collectionVariables.get(\"skill_name_updated\"));",
															"    pm.expect(jsonData.profile.skills[0].level).to.eql(pm.collectionVariables.get(\"skill_level_updated\"));",
															"    pm.expect(jsonData.profile.skills[0].id).to.eql(pm.collectionVariables.get(\"id_skill\"));",
															"",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "",
														"type": "text",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl_api}}/api/profile",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete the skill",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3600297f-a0f4-44e9-89b6-7577fd82d86c",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/skills?id={{id_skill}}",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"skills"
													],
													"query": [
														{
															"key": "id",
															"value": "{{id_skill}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Check if skill has been  deleted successfully",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2f04aeb9-f302-4f26-89b0-c6d181441c1c",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has OK\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Content-Type is json\", function () {",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Check if skill has been deleted successfully\", function () {",
															"    pm.expect(jsonData.profile.skills).to.be.an('array').that.is.empty",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "",
														"type": "text",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl_api}}/api/profile",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Experience",
							"item": [
								{
									"name": "Add Experience",
									"item": [
										{
											"name": "Add a experience",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															"\r",
															"pm.test(\"Response includes property id\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"id\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"id_experience\", jsonData.id);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"company\": \"{{experience_company}}\",\r\n  \"position\": \"{{experience_position}}\",\r\n  \"responsibilities\": \"{{experience_responsibilities}}\",\r\n  \"startDate\": \"{{experience_startdate}}\",\r\n  \"endDate\": \"{{experience_enddate}}\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/experience",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"experience"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a duplicated experience",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has BadRequest\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															"\r",
															"pm.test(\"Message is Duplicated\", function () {\r",
															"    pm.expect(jsonData.message).to.include(\"Duplicated\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"company\": \"{{experience_company}}\",\r\n  \"position\": \"{{experience_position}}\",\r\n  \"responsibilities\": \"my responsibility\",\r\n  \"startDate\": \"{{experience_startdate}}\",\r\n  \"endDate\": \"{{experience_enddate}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/experience",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"experience"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a experience without body",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has BadRequest\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/experience",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"experience"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a experience with invalid date",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has BadRequest\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "     {\r\n        \"company\": \"{{experience_company}}\",\r\n        \"position\": \"{{experience_position}}\",\r\n        \"responsibilities\": \"{{experience_responsibilities}}\",\r\n        \"startDate\": \"2020-05-27T08:30:06.936Z\",\r\n        \"endDate\": \"2018-09-27T08:30:08.427Z\"\r\n            }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/experience",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"experience"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a experience with invalid body",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"company1\": \"{{experience_company}}\",\r\n  \"position1\": \"{{experience_postition}}\",\r\n  \"responsibilities1\": \"{{experience_responsibilities}}\",\r\n  \"startDate1\": \"{{experience_startdate}}\",\r\n  \"endDate1\": \"{{experience_enddate}}\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/experience",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"experience"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a experience without authorization",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"",
															"pm.test(\"Status code name has Unauthorized\", function () {",
															"    pm.response.to.have.status(\"Unauthorized\");",
															"});",
															"",
															"pm.test(\"WWW-Authenticate is present\", function () {",
															"    pm.response.to.have.header(\"WWW-Authenticate\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/experience",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"experience"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a experience without permission",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Status code name has Forbidden\", function () {",
															"    pm.response.to.have.status(\"Forbidden\");",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token_employer}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/skills",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"skills"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Update Experience",
									"item": [
										{
											"name": "Update the experience",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "397d058f-2556-48c3-94bd-9b41fa9edb6e",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\":\"{{id_experience}}\",\r\n  \"company\": \"{{experience_company_updated}}\",\r\n  \"position\": \"{{experience_position_updated}}\",\r\n  \"responsibilities\": \"{{experience_responsibilities_updated}}\",\r\n  \"startDate\": \"{{experience_startdate_updated}}\",\r\n  \"endDate\": \"{{experience_enddate_updated}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/experience",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"experience"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a experience",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Message is Added\", function () {\r",
															"    pm.expect(jsonData.message).to.include(\"Added\");\r",
															"});\r",
															"\r",
															"pm.test(\"Response includes property id\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"id\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"id_experience\", jsonData.id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"company\": \"{{experience_company}}\",\r\n  \"position\": \"{{experience_position}}\",\r\n  \"responsibilities\": \"{{experience_responsibilities}}\",\r\n  \"startDate\": \"{{experience_startdate}}\",\r\n  \"endDate\": \"{{experience_enddate}}\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/experience",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"experience"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the experence without editing",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "397d058f-2556-48c3-94bd-9b41fa9edb6e",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"id\":\"{{id_experience}}\",\r\n  \"company\": \"{{experience_company}}\",\r\n  \"position\": \"{{experience_position}}\",\r\n  \"responsibilities\": \"{{experience_responsibilities}}\",\r\n  \"startDate\": \"{{experience_startdate}}\",\r\n  \"endDate\": \"{{experience_enddate}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/experience",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"experience"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the experience to be duplicated",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "397d058f-2556-48c3-94bd-9b41fa9edb6e",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has BadRequest\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															"\r",
															"pm.test(\"Message is Duplicated\", function () {\r",
															"    pm.expect(jsonData.message).to.include(\"Duplicated\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\":\"{{id_experience}}\",\r\n  \"company\": \"{{experience_company_updated}}\",\r\n  \"position\": \"{{experience_position_updated}}\",\r\n  \"responsibilities\": \"{{experience_responsibilities_updated}}\",\r\n  \"startDate\": \"{{experience_startdate_updated}}\",\r\n  \"endDate\": \"{{experience_enddate_updated}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/experience",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"experience"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the experience with non-existed id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has BadRequest\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\":\"5e61f86\",\n  \"company\": \"{{experience_company}}\",\n  \"position\": \"{{experience_position}}\",\n  \"responsibilities\": \"{{experience_responsibilities}}\",\n  \"startDate\": \"{{experience_startdate}}\",\n  \"endDate\": \"{{experience_enddate}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/skills",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"skills"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the experience with invalid body",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has BadRequest\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"id\":\"{{id_experience}}\",\r\n  \"company1\": \"{{experience_company}}\",\r\n  \"position1\": \"{{experience_position}}\",\r\n  \"responsibilities1\": \"{{experience_responsibilities}}\",\r\n  \"startDate1\": \"{{experience_startdate}}\",\r\n  \"endDate1\": \"{{experience_enddate}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/experience",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"experience"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the experience without body",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has BadRequest\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/experience",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"experience"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the experience without authorization",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "397d058f-2556-48c3-94bd-9b41fa9edb6e",
														"exec": [
															"pm.test(\"Status code is 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has Unauthorized\", function () {\r",
															"    pm.response.to.have.status(\"Unauthorized\");\r",
															"});\r",
															"\r",
															"pm.test(\"WWW-Authenticate is present\", function () {\r",
															"    pm.response.to.have.header(\"WWW-Authenticate\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/experience",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"experience"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the experience without permission",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "397d058f-2556-48c3-94bd-9b41fa9edb6e",
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has Forbidden\", function () {\r",
															"    pm.response.to.have.status(\"Forbidden\");\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token_employer}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/experience",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"experience"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Get experiences",
									"item": [
										{
											"name": "Get the experiences",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e838b6a5-5f98-470c-b559-d31350299c90",
														"exec": [
															"/*pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Content-Type is json\", function () {",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
															"});",
															"",
															"var skills = pm.response.json();",
															"var result = false;*/",
															"",
															"//Need add validation for schema, Not sure the expected keys",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/experience",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"experience"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get the experiences without authorization",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e838b6a5-5f98-470c-b559-d31350299c90",
														"exec": [
															"/*pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"",
															"pm.test(\"Status code name has Unauthorized\", function () {",
															"    pm.response.to.have.status(\"Unauthorized\");",
															"});",
															"",
															"pm.test(\"WWW-Authenticate is present\", function () {",
															"    pm.response.to.have.header(\"WWW-Authenticate\");",
															"});*/",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/experience",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"experience"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get the experiences without permission",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e838b6a5-5f98-470c-b559-d31350299c90",
														"exec": [
															"/*pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Status code name has Forbidden\", function () {",
															"    pm.response.to.have.status(\"Forbidden\");",
															"});*/",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token_employer}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/experience",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"experience"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Delete experiences",
									"item": [
										{
											"name": "Delete the experience",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3600297f-a0f4-44e9-89b6-7577fd82d86c",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/experience?id={{id_experience}}",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"experience"
													],
													"query": [
														{
															"key": "id",
															"value": "{{id_experience}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete the experience with non-existed id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3600297f-a0f4-44e9-89b6-7577fd82d86c",
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has Bad Request\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"    \r",
															"});pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/experience?id=5e57b756a30546",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"experience"
													],
													"query": [
														{
															"key": "id",
															"value": "5e57b756a30546"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete the experience without id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3600297f-a0f4-44e9-89b6-7577fd82d86c",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has Bad Request\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"    \r",
															"});pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/experience",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"experience"
													],
													"query": [
														{
															"key": "id",
															"value": "5e57b756a30546",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete the experience without autorization",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3600297f-a0f4-44e9-89b6-7577fd82d86c",
														"exec": [
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"",
															"pm.test(\"Status code name has Unauthorized\", function () {",
															"    pm.response.to.have.status(\"Unauthorized\");",
															"});",
															"",
															"pm.test(\"WWW-Authenticate is present\", function () {",
															"    pm.response.to.have.header(\"WWW-Authenticate\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/experience?id={{id_experience}}",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"experience"
													],
													"query": [
														{
															"key": "id",
															"value": "{{id_experience}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete the experience witout permission",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3600297f-a0f4-44e9-89b6-7577fd82d86c",
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Status code name has Forbidden\", function () {",
															"    pm.response.to.have.status(\"Forbidden\");",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token_employer}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/experience?id={{id_experience}}",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"experience"
													],
													"query": [
														{
															"key": "id",
															"value": "{{id_experience}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "CRUD",
									"item": [
										{
											"name": "Clear profile data",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c67770f4-84c0-49c7-b296-b0d0f42c10e1",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has OK\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Content-Type is json\", function () {",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Response has success\", function () {",
															"    pm.expect(jsonData.success).to.eql(true);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n        \"id\": \"{{id_talent}}\",\r\n        \"firstName\": \"talent\",\r\n        \"middleName\": null,\r\n        \"lastName\": \"MVP\",\r\n        \"username\": \"talent\",\r\n        \"gender\": null,\r\n        \"email\": \"talent@mvp.studio\",\r\n        \"phone\": null,\r\n        \"mobilePhone\":null,\r\n        \"isMobilePhoneVerified\": true,\r\n        \"address\": {\r\n            \"number\": \"\",\r\n            \"street\": \"\",\r\n            \"suburb\": \"\",\r\n            \"postCode\": 0,\r\n            \"city\": \"\",\r\n            \"country\": \"\"\r\n        },\r\n        \"nationality\": null,\r\n        \"visaStatus\": null,\r\n        \"visaExpiryDate\": null,\r\n        \"profilePhoto\": \"start_remove-79a4598a05a77ca999df1dcb434160994b6fde2c3e9101984fb1be0f16d0a74e.png\",\r\n        \"profilePhotoUrl\": \"https://www.remove.bg/assets/start_remove-79a4598a05a77ca999df1dcb434160994b6fde2c3e9101984fb1be0f16d0a74e.png\",\r\n        \"videoName\": null,\r\n        \"videoUrl\": \"\",\r\n        \"cvName\": null,\r\n        \"cvUrl\": \"\",\r\n        \"summary\": null,\r\n        \"description\": null,\r\n        \"linkedAccounts\": [],\r\n        \"jobSeekingStatus\": {},\r\n        \"languages\": [],\r\n        \"skills\": [],\r\n        \"educations\": [],\r\n        \"certifications\": [],\r\n        \"experiences\": []\r\n    }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a experience",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															"\r",
															"pm.test(\"Response includes property id\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"id\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"id_experience\", jsonData.id);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"company\": \"{{experience_company}}\",\r\n  \"position\": \"{{experience_position}}\",\r\n  \"responsibilities\": \"{{experience_responsibilities}}\",\r\n  \"startDate\": \"{{experience_startdate}}\",\r\n  \"endDate\": \"{{experience_enddate}}\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/experience",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"experience"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check if experience has been  added successfully",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2f04aeb9-f302-4f26-89b0-c6d181441c1c",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has OK\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Content-Type is json\", function () {",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Check if experience has been  added successfully\", function () {",
															"    pm.expect(jsonData.profile.experiences[0].company).to.eql(pm.collectionVariables.get(\"experience_company\"));",
															"    pm.expect(jsonData.profile.experiences[0].position).to.eql(pm.collectionVariables.get(\"experience_position\"));",
															"     pm.expect(jsonData.profile.experiences[0].responsibilities).to.eql(pm.collectionVariables.get(\"experience_responsibilities\"));",
															"    pm.expect(jsonData.profile.experiences[0].startDate).to.eql(pm.collectionVariables.get(\"experience_startdate\"));",
															"    pm.expect(jsonData.profile.experiences[0].endDate).to.eql(pm.collectionVariables.get(\"experience_enddate\"));",
															"    pm.expect(jsonData.profile.experiences[0].id).to.eql(pm.collectionVariables.get(\"id_experience\"));",
															"",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "",
														"type": "text",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl_api}}/api/profile",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the experience",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "397d058f-2556-48c3-94bd-9b41fa9edb6e",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\":\"{{id_experience}}\",\r\n  \"company\": \"{{experience_company_updated}}\",\r\n  \"position\": \"{{experience_position_updated}}\",\r\n  \"responsibilities\": \"{{experience_responsibilities_updated}}\",\r\n  \"startDate\": \"{{experience_startdate_updated}}\",\r\n  \"endDate\": \"{{experience_enddate_updated}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/experience",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"experience"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check if experience has been  updated successfully",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2f04aeb9-f302-4f26-89b0-c6d181441c1c",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has OK\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Content-Type is json\", function () {",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Check if experience has been updated successfully\", function () {",
															"     pm.expect(jsonData.profile.experiences[0].company).to.eql(pm.collectionVariables.get(\"experience_company_updated\"));",
															"    pm.expect(jsonData.profile.experiences[0].position).to.eql(pm.collectionVariables.get(\"experience_position_updated\"));",
															"     pm.expect(jsonData.profile.experiences[0].responsibilities).to.eql(pm.collectionVariables.get(\"experience_responsibilities_updated\"));",
															"    pm.expect(jsonData.profile.experiences[0].startDate).to.eql(pm.collectionVariables.get(\"experience_startdate_updated\"));",
															"    pm.expect(jsonData.profile.experiences[0].endDate).to.eql(pm.collectionVariables.get(\"experience_enddate_updated\"));",
															"    pm.expect(jsonData.profile.experiences[0].id).to.eql(pm.collectionVariables.get(\"id_experience\"));",
															"",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "",
														"type": "text",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl_api}}/api/profile",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete the experience",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3600297f-a0f4-44e9-89b6-7577fd82d86c",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/experience?id={{id_experience}}",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"experience"
													],
													"query": [
														{
															"key": "id",
															"value": "{{id_experience}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Check if experience has been  deleted successfully",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2f04aeb9-f302-4f26-89b0-c6d181441c1c",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has OK\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Content-Type is json\", function () {",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Check if experience has been deleted successfully\", function () {",
															"    pm.expect(jsonData.profile.experiences).to.be.an('array').that.is.empty",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "",
														"type": "text",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl_api}}/api/profile",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Certification",
							"item": [
								{
									"name": "Add certification",
									"item": [
										{
											"name": "Add a certification",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															"\r",
															"pm.test(\"Response includes property id\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"id\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"id_certification\", jsonData.id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"certificationName\": \"{{certificationName}}\",\r\n  \"certificationFrom\": \"{{certificationFrom}}\",\r\n  \"certificationYear\": {{certificationYear}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/certifications",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"certifications"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a duplicated certification",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has BadRequest\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															"\r",
															"pm.test(\"Message is Duplicated\", function () {\r",
															"    pm.expect(jsonData.message).to.include(\"Duplicated\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"certificationName\": \"{{certificationName}}\",\r\n  \"certificationFrom\": \"ANZTB\",\r\n  \"certificationYear\": 2014\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/certifications",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"certifications"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a certification without body",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has BadRequest\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/certifications",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"certifications"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a certification with invalid year",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"certificationName\": \"{{certificationName}}\",\r\n  \"certificationFrom\": \"{{certificationFrom}}\",\r\n  \"certificationYear\": \"year\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/certifications",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"certifications"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a certification with invalid body",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"certificationName1\": \"{{certificationName}}\",\r\n  \"certificationFrom1\": \"{{certificationFrom}}\",\r\n  \"certificationYear1\": {{certificationYear}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/certifications",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"certifications"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a certification without authorization",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"",
															"pm.test(\"Status code name has Unauthorized\", function () {",
															"    pm.response.to.have.status(\"Unauthorized\");",
															"});",
															"",
															"pm.test(\"WWW-Authenticate is present\", function () {",
															"    pm.response.to.have.header(\"WWW-Authenticate\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/certifications",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"certifications"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a certification without permission",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Status code name has Forbidden\", function () {",
															"    pm.response.to.have.status(\"Forbidden\");",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token_employer}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/certifications",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"certifications"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Update certification",
									"item": [
										{
											"name": "Update the certification",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "397d058f-2556-48c3-94bd-9b41fa9edb6e",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"id\":\"{{id_certification}}\",\r\n  \"certificationName\": \"{{certificationName_updated}}\",\r\n  \"certificationFrom\": \"{{certificationFrom_updated}}\",\r\n  \"certificationYear\": {{certificationYear_updated}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/certifications",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"certifications"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a certification",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															"\r",
															"pm.test(\"Response includes property id\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"id\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"id_certification\", jsonData.id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"certificationName\": \"{{certificationName}}\",\r\n  \"certificationFrom\": \"{{certificationFrom}}\",\r\n  \"certificationYear\": {{certificationYear}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/certifications",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"certifications"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the certification without editing",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "397d058f-2556-48c3-94bd-9b41fa9edb6e",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"id\":\"{{id_certification}}\",\r\n  \"certificationName\": \"{{certificationName}}\",\r\n  \"certificationFrom\": \"{{certificationFrom}}\",\r\n  \"certificationYear\": {{certificationYear}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/certifications",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"certifications"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the certification to be duplicated",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "397d058f-2556-48c3-94bd-9b41fa9edb6e",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has BadRequest\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															"\r",
															"pm.test(\"Message is Duplicated\", function () {\r",
															"    pm.expect(jsonData.message).to.include(\"Duplicated\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"id\":\"{{id_certification}}\",\r\n  \"certificationName\": \"{{certificationName_updated}}\",\r\n  \"certificationFrom\": \"ABC\",\r\n  \"certificationYear\": 2013\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/certifications",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"certifications"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the certification with non-existed id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has BadRequest\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"id\":\"1234567\",\r\n  \"certificationName\": \"{{certificationName}}\",\r\n  \"certificationFrom\": \"{{certificationFrom}}\",\r\n  \"certificationYear\": {{certificationYear}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/certifications",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"certifications"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the certification with invalid year",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has BadRequest\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"id\":\"{{id_certification}}\",\r\n  \"certificationName\": \"{{certificationName}}\",\r\n  \"certificationFrom\": \"{{certificationFrom}}\",\r\n  \"certificationYear\": \"year\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/certifications",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"certifications"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the certification without body",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has BadRequest\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/certifications",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"certifications"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the certification with invalid body",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has BadRequest\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"id\":\"{{id_certification}}\",\r\n  \"certificationName1\": \"{{certificationName}}\",\r\n  \"certificationFrom1\": \"{{certificationFrom}}\",\r\n  \"certificationYear1\": {{certificationYear}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/certifications",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"certifications"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the certification without authorization",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "397d058f-2556-48c3-94bd-9b41fa9edb6e",
														"exec": [
															"pm.test(\"Status code is 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has Unauthorized\", function () {\r",
															"    pm.response.to.have.status(\"Unauthorized\");\r",
															"});\r",
															"\r",
															"pm.test(\"WWW-Authenticate is present\", function () {\r",
															"    pm.response.to.have.header(\"WWW-Authenticate\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/certifications",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"certifications"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the certification without permission",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "397d058f-2556-48c3-94bd-9b41fa9edb6e",
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has Forbidden\", function () {\r",
															"    pm.response.to.have.status(\"Forbidden\");\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token_employer}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/certifications",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"certifications"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Get certification",
									"item": [
										{
											"name": "Get the certification",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e838b6a5-5f98-470c-b559-d31350299c90",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Content-Type is json\", function () {",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
															"});",
															"",
															"var skills = pm.response.json();",
															"var result = false;",
															"",
															"//Need add validation for schema, Not sure the expected keys",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/certifications",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"certifications"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get the certifications without authorization",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e838b6a5-5f98-470c-b559-d31350299c90",
														"exec": [
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"",
															"pm.test(\"Status code name has Unauthorized\", function () {",
															"    pm.response.to.have.status(\"Unauthorized\");",
															"});",
															"",
															"pm.test(\"WWW-Authenticate is present\", function () {",
															"    pm.response.to.have.header(\"WWW-Authenticate\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/certifications",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"certifications"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get the certifications without permission",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e838b6a5-5f98-470c-b559-d31350299c90",
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Status code name has Forbidden\", function () {",
															"    pm.response.to.have.status(\"Forbidden\");",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token_employer}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/certifications",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"certifications"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Delete certification",
									"item": [
										{
											"name": "Delete the certification",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3600297f-a0f4-44e9-89b6-7577fd82d86c",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/certifications?id={{id_certification}}",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"certifications"
													],
													"query": [
														{
															"key": "id",
															"value": "{{id_certification}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete the certification with non-existed id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3600297f-a0f4-44e9-89b6-7577fd82d86c",
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has Bad Request\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"    \r",
															"});pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/certifications?id=5e57b756a30546",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"certifications"
													],
													"query": [
														{
															"key": "id",
															"value": "5e57b756a30546"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete the certification without id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3600297f-a0f4-44e9-89b6-7577fd82d86c",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has Bad Request\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"    \r",
															"});pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/certifications",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"certifications"
													],
													"query": [
														{
															"key": "id",
															"value": "5e57b756a30546",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete the certification without autorization",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3600297f-a0f4-44e9-89b6-7577fd82d86c",
														"exec": [
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"",
															"pm.test(\"Status code name has Unauthorized\", function () {",
															"    pm.response.to.have.status(\"Unauthorized\");",
															"});",
															"",
															"pm.test(\"WWW-Authenticate is present\", function () {",
															"    pm.response.to.have.header(\"WWW-Authenticate\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/certifications?id={{id_certification}}",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"certifications"
													],
													"query": [
														{
															"key": "id",
															"value": "{{id_certification}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete the certification witout permission",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3600297f-a0f4-44e9-89b6-7577fd82d86c",
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Status code name has Forbidden\", function () {",
															"    pm.response.to.have.status(\"Forbidden\");",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token_employer}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/certifications?id={{id_certification}}",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"certifications"
													],
													"query": [
														{
															"key": "id",
															"value": "{{id_certification}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "CRUD",
									"item": [
										{
											"name": "Clear profile data",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c67770f4-84c0-49c7-b296-b0d0f42c10e1",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has OK\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Content-Type is json\", function () {",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Response has success\", function () {",
															"    pm.expect(jsonData.success).to.eql(true);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n        \"id\": \"{{id_talent}}\",\r\n        \"firstName\": \"talent\",\r\n        \"middleName\": null,\r\n        \"lastName\": \"MVP\",\r\n        \"username\": \"talent\",\r\n        \"gender\": null,\r\n        \"email\": \"talent@mvp.studio\",\r\n        \"phone\": null,\r\n        \"mobilePhone\":null,\r\n        \"isMobilePhoneVerified\": true,\r\n        \"address\": {\r\n            \"number\": \"\",\r\n            \"street\": \"\",\r\n            \"suburb\": \"\",\r\n            \"postCode\": 0,\r\n            \"city\": \"\",\r\n            \"country\": \"\"\r\n        },\r\n        \"nationality\": null,\r\n        \"visaStatus\": null,\r\n        \"visaExpiryDate\": null,\r\n        \"profilePhoto\": \"start_remove-79a4598a05a77ca999df1dcb434160994b6fde2c3e9101984fb1be0f16d0a74e.png\",\r\n        \"profilePhotoUrl\": \"https://www.remove.bg/assets/start_remove-79a4598a05a77ca999df1dcb434160994b6fde2c3e9101984fb1be0f16d0a74e.png\",\r\n        \"videoName\": null,\r\n        \"videoUrl\": \"\",\r\n        \"cvName\": null,\r\n        \"cvUrl\": \"\",\r\n        \"summary\": null,\r\n        \"description\": null,\r\n        \"linkedAccounts\": [],\r\n        \"jobSeekingStatus\": {},\r\n        \"languages\": [],\r\n        \"skills\": [],\r\n        \"educations\": [],\r\n        \"certifications\": [],\r\n        \"experiences\": []\r\n    }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a certification",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															"\r",
															"pm.test(\"Response includes property id\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"id\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"id_certification\", jsonData.id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"certificationName\": \"{{certificationName}}\",\r\n  \"certificationFrom\": \"{{certificationFrom}}\",\r\n  \"certificationYear\": {{certificationYear}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/certifications",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"certifications"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check if certification has been  added successfully",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2f04aeb9-f302-4f26-89b0-c6d181441c1c",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has OK\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Content-Type is json\", function () {",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Check if certification has been  added successfully\", function () {",
															"    pm.expect(jsonData.profile.certifications[0].certificationName).to.eql(pm.collectionVariables.get(\"certificationName\"));",
															"    pm.expect(jsonData.profile.certifications[0].certificationFrom).to.eql(pm.collectionVariables.get(\"certificationFrom\"));",
															"     pm.expect(jsonData.profile.certifications[0].certificationYear).to.eql(Number(pm.collectionVariables.get(\"certificationYear\")));",
															"    pm.expect(jsonData.profile.certifications[0].id).to.eql(pm.collectionVariables.get(\"id_certification\"));",
															"",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "",
														"type": "text",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl_api}}/api/profile",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the certification",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "397d058f-2556-48c3-94bd-9b41fa9edb6e",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"id\":\"{{id_certification}}\",\r\n  \"certificationName\": \"{{certificationName_updated}}\",\r\n  \"certificationFrom\": \"{{certificationFrom_updated}}\",\r\n  \"certificationYear\": {{certificationYear_updated}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/certifications",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"certifications"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check if certification has been  updated successfully",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2f04aeb9-f302-4f26-89b0-c6d181441c1c",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has OK\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Content-Type is json\", function () {",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Check if certification has been updated successfully\", function () {",
															"    pm.expect(jsonData.profile.certifications[0].certificationName).to.eql(pm.collectionVariables.get(\"certificationName_updated\"));",
															"    pm.expect(jsonData.profile.certifications[0].certificationFrom).to.eql(pm.collectionVariables.get(\"certificationFrom_updated\"));",
															"     pm.expect(jsonData.profile.certifications[0].certificationYear).to.eql(Number(pm.collectionVariables.get(\"certificationYear_updated\")));",
															"    pm.expect(jsonData.profile.certifications[0].id).to.eql(pm.collectionVariables.get(\"id_certification\"));",
															"",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "",
														"type": "text",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl_api}}/api/profile",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete the certification",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3600297f-a0f4-44e9-89b6-7577fd82d86c",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/certifications?id={{id_certification}}",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"certifications"
													],
													"query": [
														{
															"key": "id",
															"value": "{{id_certification}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Check if certification has been  deleted successfully",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2f04aeb9-f302-4f26-89b0-c6d181441c1c",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has OK\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Content-Type is json\", function () {",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Check if certification has been deleted successfully\", function () {",
															"    pm.expect(jsonData.profile.certifications).to.be.an('array').that.is.empty",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "",
														"type": "text",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl_api}}/api/profile",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Education",
							"item": [
								{
									"name": "Add education",
									"item": [
										{
											"name": "Add an education",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															"\r",
															"pm.test(\"Response includes property id\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"id\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"id_education\", jsonData.id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"country\": \"{{education_country}}\",\r\n  \"instituteName\": \"{{education_instituteName}}\",\r\n  \"title\": \"{{education_title}}\",\r\n  \"degree\": \"{{education_degree}}\",\r\n  \"graduationOn\": \"{{education_graduationOn}}\",\r\n  \"startOn\": \"{{education_startOn}}\",\r\n  \"studyPeriod\": {\r\n    \"from\": \"{{education_from}}\",\r\n    \"end\": \"{{education_end}}\"\r\n  }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/educations",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"educations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a duplicated education",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has BadRequest\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															"\r",
															"pm.test(\"Message is Duplicated\", function () {\r",
															"    pm.expect(jsonData.message).to.include(\"Duplicated\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"country\": \"China\",\r\n  \"instituteName\": \"{{education_instituteName}}\",\r\n  \"title\": \"{{education_title}}\",\r\n  \"degree\": \"{{education_degree}}\",\r\n  \"graduationOn\": \"2013-03-09T08:06:12.659Z\",\r\n  \"startOn\": \"2010-03-09T08:06:12.659Z\",\r\n  \"studyPeriod\": {\r\n    \"from\": \"2010-03-09T08:06:12.659Z\",\r\n    \"end\": \"2013-03-09T08:06:12.659Z\"\r\n  }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/educations",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"educations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add an education without body",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has BadRequest\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/educations",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"educations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add an education with invalid key",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"country1\": \"{{education_country}}\",\r\n  \"instituteName1\": \"{{education_instituteName}}\",\r\n  \"title\": \"{{education_title}}\",\r\n  \"degree\": \"{{education_degree}}\",\r\n  \"graduationOn\": \"2013-03-09T08:06:12.659Z\",\r\n  \"startOn1\": \"2010-03-09T08:06:12.659Z\",\r\n  \"studyPeriod1\": {\r\n    \"from1\": \"2010-03-09T08:06:12.659Z\",\r\n    \"end1\": \"2013-03-09T08:06:12.659Z\"\r\n  }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/educations",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"educations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add an education with invalid value",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"country\": \"New Zealand\" ,\r\n  \"instituteName\": \"string\",\r\n  \"title\": \"string\",\r\n  \"degree\": \"string\",\r\n  \"graduationOn\": \"2013-03-09T08:06:12.659Z\",\r\n  \"startOn\": \"2010-03-09T08:06:12.659Z\",\r\n  \"studyPeriod\": {\r\n    \"from\": \"2010-03-09T08:06:12.659Z\",\r\n    \"end\": \"2013-03-09T08:06:12.659Z\"\r\n  }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/educations",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"educations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add an education with invalid date",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"country\": \"{{education_country}}\",\r\n  \"instituteName\": \"{{education_instituteName}}\",\r\n  \"title\": \"{{education_title}}\",\r\n  \"degree\": \"{{education_degree}}\",\r\n  \"graduationOn\": \"2020-03-09T08:06:12.659Z\",\r\n  \"startOn\": \"2012-03-09T08:06:12.659Z\",\r\n  \"studyPeriod\": {\r\n    \"from\": \"2020-03-09T08:06:12.659Z\",\r\n    \"end\": \"2012-03-09T08:06:12.659Z\"\r\n  }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/educations",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"educations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add an education without authorization",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"",
															"pm.test(\"Status code name has Unauthorized\", function () {",
															"    pm.response.to.have.status(\"Unauthorized\");",
															"});",
															"",
															"pm.test(\"WWW-Authenticate is present\", function () {",
															"    pm.response.to.have.header(\"WWW-Authenticate\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/educations",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"educations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add an education without permission",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Status code name has Forbidden\", function () {",
															"    pm.response.to.have.status(\"Forbidden\");",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token_employer}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/educations",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"educations"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Update education",
									"item": [
										{
											"name": "Update the education",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "397d058f-2556-48c3-94bd-9b41fa9edb6e",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"id\":\"{{id_education}}\",\r\n  \"country\": \"{{education_country_updated}}\",\r\n  \"instituteName\": \"{{education_instituteName_updated}}\",\r\n  \"title\": \"{{education_title_updated}}\",\r\n  \"degree\": \"{{education_degree_updated}}\",\r\n  \"graduationOn\": \"{{education_graduationOn_updated}}\",\r\n  \"startOn\": \"{{education_startOn_updated}}\",\r\n  \"studyPeriod\": {\r\n    \"from\": \"{{education_from_updated}}\",\r\n    \"end\": \"{{education_end_updated}}\"\r\n  }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/educations",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"educations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add a education",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															"\r",
															"pm.test(\"Response includes property id\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"id\");\r",
															"});\r",
															"\r",
															"\r",
															"pm.collectionVariables.set(\"id_education\", jsonData.id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"country\": \"{{education_country}}\",\r\n  \"instituteName\": \"{{education_instituteName}}\",\r\n  \"title\": \"{{education_title}}\",\r\n  \"degree\": \"{{education_degree}}\",\r\n  \"graduationOn\": \"{{education_graduationOn}}\",\r\n  \"startOn\": \"{{education_startOn}}\",\r\n  \"studyPeriod\": {\r\n    \"from\": \"{{education_from}}\",\r\n    \"end\": \"{{education_end}}\"\r\n  }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/educations",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"educations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the education without editing",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "397d058f-2556-48c3-94bd-9b41fa9edb6e",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"id\":\"{{id_education}}\",\r\n  \"country\": \"{{education_country}}\",\r\n  \"instituteName\": \"{{education_instituteName}}\",\r\n  \"title\": \"{{education_title}}\",\r\n  \"degree\": \"{{education_degree}}\",\r\n  \"graduationOn\": \"{{education_graduationOn}}\",\r\n  \"startOn\": \"{{education_startOn}}\",\r\n  \"studyPeriod\": {\r\n    \"from\": \"{{education_from}}\",\r\n    \"end\": \"{{education_end}}\"\r\n  }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/educations",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"educations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the education to be duplicated",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "397d058f-2556-48c3-94bd-9b41fa9edb6e",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has BadRequest\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															"\r",
															"pm.test(\"Message is Duplicated\", function () {\r",
															"    pm.expect(jsonData.message).to.include(\"Duplicated\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"id\":\"{{id_education}}\",\r\n  \"country\": \"China\",\r\n  \"instituteName\": \"{{education_instituteName_udpated}}\",\r\n  \"title\": \"{{education_title_updated}}\",\r\n  \"degree\": \"{{education_degree_updated}}\",\r\n  \"graduationOn\": \"2013-03-09T08:06:12.659Z\",\r\n  \"startOn\": \"2010-03-09T08:06:12.659Z\",\r\n  \"studyPeriod\": {\r\n    \"from\": \"2010-03-09T08:06:12.659Z\",\r\n    \"end\": \"2013-03-09T08:06:12.659Z\"\r\n  }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/educations",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"educations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the education with non-existed id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has BadRequest\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"id\":\"1234567\",\r\n  \"country\": \"{{education_country}}\",\r\n  \"instituteName\": \"{{education_instituteName}}\",\r\n  \"title\": \"{{education_title}}\",\r\n  \"degree\": \"{{education_degree}}\",\r\n  \"graduationOn\": \"{{education_graduationOn}}\",\r\n  \"startOn\": \"{{education_startOn}}\",\r\n  \"studyPeriod\": {\r\n    \"from\": \"{{education_from}}\",\r\n    \"end\": \"{{education_end}}\"\r\n  }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/educations",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"educations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the education with invalid date",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has BadRequest\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"id\":\"{{id_education}}\",\r\n  \"country\": \"{{education_country_updated}}\",\r\n  \"instituteName\": \"{{education_instituteName_updated}}\",\r\n  \"title\": \"{{education_title_updated}}\",\r\n  \"degree\": \"{{education_degree_updated}}\",\r\n  \"graduationOn\": \"2020-03-09T08:06:12.659Z\",\r\n  \"startOn\": \"2012-03-09T08:06:12.659Z\",\r\n  \"studyPeriod\": {\r\n    \"from\": \"2020-03-09T08:06:12.659Z\",\r\n    \"end\": \"2012-03-09T08:06:12.659Z\"\r\n  }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/educations",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"educations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the education with invalid key",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has BadRequest\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"id\":\"{{id_education}}\",\r\n  \"country1\": \"{{education_country}}\",\r\n  \"instituteName1\": \"{{education_instituteName}}\",\r\n  \"title1\": \"{{education_title}}\",\r\n  \"degree1\": \"{{education_degree}}\",\r\n  \"graduationOn1\": \"2013-03-09T08:06:12.659Z\",\r\n  \"startOn1\": \"2010-03-09T08:06:12.659Z\",\r\n  \"studyPeriod1\": {\r\n    \"from1\": \"2010-03-09T08:06:12.659Z\",\r\n    \"end1\": \"2013-03-09T08:06:12.659Z\"\r\n  }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/educations",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"educations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the education with invalid value",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has BadRequest\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"id\":\"{{id_education}}\",\r\n  \"country\": null,\r\n  \"instituteName\": null,\r\n  \"title\": \"{{education_title}}\",\r\n  \"degree\": \"{{education_degree}}\",\r\n  \"graduationOn\": \"{{education_graduationOn}}\",\r\n  \"startOn\": \"{{education_startOn}}\",\r\n  \"studyPeriod\": {\r\n    \"from\": \"{{education_from}}\",\r\n    \"end\": \"{{education_end}}\"\r\n  }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/educations",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"educations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the education without body",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has BadRequest\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/educations",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"educations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the education without authorization",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "397d058f-2556-48c3-94bd-9b41fa9edb6e",
														"exec": [
															"pm.test(\"Status code is 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has Unauthorized\", function () {\r",
															"    pm.response.to.have.status(\"Unauthorized\");\r",
															"});\r",
															"\r",
															"pm.test(\"WWW-Authenticate is present\", function () {\r",
															"    pm.response.to.have.header(\"WWW-Authenticate\");\r",
															"});\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/educations",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"educations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the education without permission",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "397d058f-2556-48c3-94bd-9b41fa9edb6e",
														"exec": [
															"pm.test(\"Status code is 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has Forbidden\", function () {\r",
															"    pm.response.to.have.status(\"Forbidden\");\r",
															"});\r",
															"\r",
															"\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token_employer}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/educations",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"educations"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Get education",
									"item": [
										{
											"name": "Get the education",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e838b6a5-5f98-470c-b559-d31350299c90",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Content-Type is json\", function () {",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
															"});",
															"",
															"var skills = pm.response.json();",
															"var result = false;",
															"",
															"//Need add validation for schema, Not sure the expected keys",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/educations",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"educations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get the education without authorization",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e838b6a5-5f98-470c-b559-d31350299c90",
														"exec": [
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"",
															"pm.test(\"Status code name has Unauthorized\", function () {",
															"    pm.response.to.have.status(\"Unauthorized\");",
															"});",
															"",
															"pm.test(\"WWW-Authenticate is present\", function () {",
															"    pm.response.to.have.header(\"WWW-Authenticate\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/educations",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"educations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get the education without permission",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e838b6a5-5f98-470c-b559-d31350299c90",
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Status code name has Forbidden\", function () {",
															"    pm.response.to.have.status(\"Forbidden\");",
															"});",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token_employer}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/educations",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"educations"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Delete education",
									"item": [
										{
											"name": "Delete the education",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3600297f-a0f4-44e9-89b6-7577fd82d86c",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/educations?id={{id_education}}",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"educations"
													],
													"query": [
														{
															"key": "id",
															"value": "{{id_education}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete the education with non-existed id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3600297f-a0f4-44e9-89b6-7577fd82d86c",
														"exec": [
															"pm.test(\"Status code is 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has Bad Request\", function () {\r",
															"    pm.response.to.have.status(\"Not Found\");\r",
															"    \r",
															"});pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/educations?id=5e57b756a30546",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"educations"
													],
													"query": [
														{
															"key": "id",
															"value": "5e57b756a30546"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete the education without id",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3600297f-a0f4-44e9-89b6-7577fd82d86c",
														"exec": [
															"pm.test(\"Status code is 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has Bad Request\", function () {\r",
															"    pm.response.to.have.status(\"Bad Request\");\r",
															"    \r",
															"});pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/educations",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"educations"
													],
													"query": [
														{
															"key": "id",
															"value": "5e57b756a30546",
															"disabled": true
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete the education without autorization",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3600297f-a0f4-44e9-89b6-7577fd82d86c",
														"exec": [
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});",
															"",
															"pm.test(\"Status code name has Unauthorized\", function () {",
															"    pm.response.to.have.status(\"Unauthorized\");",
															"});",
															"",
															"pm.test(\"WWW-Authenticate is present\", function () {",
															"    pm.response.to.have.header(\"WWW-Authenticate\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/educations?id={{id_education}}",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"educations"
													],
													"query": [
														{
															"key": "id",
															"value": "{{id_education}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete the education witout permission",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3600297f-a0f4-44e9-89b6-7577fd82d86c",
														"exec": [
															"pm.test(\"Status code is 403\", function () {",
															"    pm.response.to.have.status(403);",
															"});",
															"",
															"pm.test(\"Status code name has Forbidden\", function () {",
															"    pm.response.to.have.status(\"Forbidden\");",
															"});",
															"",
															"",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token_employer}}",
															"type": "string"
														}
													]
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/educations?id={{id_education}}",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"educations"
													],
													"query": [
														{
															"key": "id",
															"value": "{{id_education}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "CRUD",
									"item": [
										{
											"name": "Clear profile data",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c67770f4-84c0-49c7-b296-b0d0f42c10e1",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has OK\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Content-Type is json\", function () {",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Response has success\", function () {",
															"    pm.expect(jsonData.success).to.eql(true);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n        \"id\": \"{{id_talent}}\",\r\n        \"firstName\": \"talent\",\r\n        \"middleName\": null,\r\n        \"lastName\": \"MVP\",\r\n        \"username\": \"talent\",\r\n        \"gender\": null,\r\n        \"email\": \"talent@mvp.studio\",\r\n        \"phone\": null,\r\n        \"mobilePhone\":null,\r\n        \"isMobilePhoneVerified\": true,\r\n        \"address\": {\r\n            \"number\": \"\",\r\n            \"street\": \"\",\r\n            \"suburb\": \"\",\r\n            \"postCode\": 0,\r\n            \"city\": \"\",\r\n            \"country\": \"\"\r\n        },\r\n        \"nationality\": null,\r\n        \"visaStatus\": null,\r\n        \"visaExpiryDate\": null,\r\n        \"profilePhoto\": \"start_remove-79a4598a05a77ca999df1dcb434160994b6fde2c3e9101984fb1be0f16d0a74e.png\",\r\n        \"profilePhotoUrl\": \"https://www.remove.bg/assets/start_remove-79a4598a05a77ca999df1dcb434160994b6fde2c3e9101984fb1be0f16d0a74e.png\",\r\n        \"videoName\": null,\r\n        \"videoUrl\": \"\",\r\n        \"cvName\": null,\r\n        \"cvUrl\": \"\",\r\n        \"summary\": null,\r\n        \"description\": null,\r\n        \"linkedAccounts\": [],\r\n        \"jobSeekingStatus\": {},\r\n        \"languages\": [],\r\n        \"skills\": [],\r\n        \"educations\": [],\r\n        \"certifications\": [],\r\n        \"experiences\": []\r\n    }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add an education",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "1596878e-db04-44c9-9115-69c0045fb3cb",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															"\r",
															"pm.test(\"Response includes property id\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"id\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"id_education\", jsonData.id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"country\": \"{{education_country}}\",\r\n  \"instituteName\": \"{{education_instituteName}}\",\r\n  \"title\": \"{{education_title}}\",\r\n  \"degree\": \"{{education_degree}}\",\r\n  \"graduationOn\": \"{{education_graduationOn}}\",\r\n  \"startOn\": \"{{education_startOn}}\",\r\n  \"studyPeriod\": {\r\n    \"from\": \"{{education_from}}\",\r\n    \"end\": \"{{education_end}}\"\r\n  }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/educations",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"educations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check if education has been  added successfully",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2f04aeb9-f302-4f26-89b0-c6d181441c1c",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has OK\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Content-Type is json\", function () {",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Check if education has been  added successfully\", function () {",
															"    pm.expect(jsonData.profile.educations[0].country).to.eql(pm.collectionVariables.get(\"education_country\"));",
															"    pm.expect(jsonData.profile.educations[0].instituteName).to.eql(pm.collectionVariables.get(\"education_instituteName\"));",
															"    pm.expect(jsonData.profile.educations[0].title).to.eql(pm.collectionVariables.get(\"education_title\"));",
															"    pm.expect(jsonData.profile.educations[0].degree).to.eql(pm.collectionVariables.get(\"education_degree\"));",
															"    /*pm.expect(jsonData.profile.educations[0].graduationOn).to.eql(pm.collectionVariables.get(\"education_graduationOn\"));",
															"    pm.expect(jsonData.profile.educations[0].startOn).to.eql(pm.collectionVariables.get(\"education_startOn\"));*/",
															"    pm.expect(jsonData.profile.educations[0].studyPeriod.from).to.eql(pm.collectionVariables.get(\"education_from\"));",
															"    pm.expect(jsonData.profile.educations[0].studyPeriod.end).to.eql(pm.collectionVariables.get(\"education_end\"));",
															"",
															"    pm.expect(jsonData.profile.educations[0].id).to.eql(pm.collectionVariables.get(\"id_education\"));",
															"",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "",
														"type": "text",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl_api}}/api/profile",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update the education",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "397d058f-2556-48c3-94bd-9b41fa9edb6e",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\t\"id\":\"{{id_education}}\",\r\n  \"country\": \"{{education_country_updated}}\",\r\n  \"instituteName\": \"{{education_instituteName_updated}}\",\r\n  \"title\": \"{{education_title_updated}}\",\r\n  \"degree\": \"{{education_degree_updated}}\",\r\n  \"graduationOn\": \"{{education_graduationOn_updated}}\",\r\n  \"startOn\": \"{{education_startOn_updated}}\",\r\n  \"studyPeriod\": {\r\n    \"from\": \"{{education_from_updated}}\",\r\n    \"end\": \"{{education_end_updated}}\"\r\n  }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/educations",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"educations"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check if education has been  updated successfully",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2f04aeb9-f302-4f26-89b0-c6d181441c1c",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has OK\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Content-Type is json\", function () {",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Check if education has been  updated successfully\", function () {",
															"    pm.expect(jsonData.profile.educations[0].country).to.eql(pm.collectionVariables.get(\"education_country_updated\"));",
															"    pm.expect(jsonData.profile.educations[0].instituteName).to.eql(pm.collectionVariables.get(\"education_instituteName_updated\"));",
															"    pm.expect(jsonData.profile.educations[0].title).to.eql(pm.collectionVariables.get(\"education_title_updated\"));",
															"    pm.expect(jsonData.profile.educations[0].degree).to.eql(pm.collectionVariables.get(\"education_degree_updated\"));",
															"    /*pm.expect(jsonData.profile.educations[0].graduationOn).to.eql(pm.collectionVariables.get(\"education_graduationOn\"));",
															"    pm.expect(jsonData.profile.educations[0].startOn).to.eql(pm.collectionVariables.get(\"education_startOn\"));*/",
															"    pm.expect(jsonData.profile.educations[0].studyPeriod.from).to.eql(pm.collectionVariables.get(\"education_from_updated\"));",
															"    pm.expect(jsonData.profile.educations[0].studyPeriod.end).to.eql(pm.collectionVariables.get(\"education_end_updated\"));",
															"",
															"    pm.expect(jsonData.profile.educations[0].id).to.eql(pm.collectionVariables.get(\"id_education\"));",
															"",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "",
														"type": "text",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl_api}}/api/profile",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete the education",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "3600297f-a0f4-44e9-89b6-7577fd82d86c",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Reposnse includes Message\", function () {\r",
															"    pm.expect(jsonData).to.have.property(\"message\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/educations?id={{id_education}}",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"educations"
													],
													"query": [
														{
															"key": "id",
															"value": "{{id_education}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Check if certification has been  deleted successfully",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2f04aeb9-f302-4f26-89b0-c6d181441c1c",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has OK\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Content-Type is json\", function () {",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Check if education has been deleted successfully\", function () {",
															"    pm.expect(jsonData.profile.educations).to.be.an('array').that.is.empty",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "",
														"type": "text",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl_api}}/api/profile",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Summary",
							"item": [
								{
									"name": "CRUD",
									"item": [
										{
											"name": "Clear profile data",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c67770f4-84c0-49c7-b296-b0d0f42c10e1",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has OK\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Content-Type is json\", function () {",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Response has success\", function () {",
															"    pm.expect(jsonData.success).to.eql(true);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n        \"id\": \"{{id_talent}}\",\r\n        \"firstName\": \"talent\",\r\n        \"middleName\": null,\r\n        \"lastName\": \"MVP\",\r\n        \"username\": \"talent\",\r\n        \"gender\": null,\r\n        \"email\": \"talent@mvp.studio\",\r\n        \"phone\": null,\r\n        \"mobilePhone\":null,\r\n        \"isMobilePhoneVerified\": true,\r\n        \"address\": {\r\n            \"number\": \"\",\r\n            \"street\": \"\",\r\n            \"suburb\": \"\",\r\n            \"postCode\": 0,\r\n            \"city\": \"\",\r\n            \"country\": \"\"\r\n        },\r\n        \"nationality\": null,\r\n        \"visaStatus\": null,\r\n        \"visaExpiryDate\": null,\r\n        \"profilePhoto\": \"start_remove-79a4598a05a77ca999df1dcb434160994b6fde2c3e9101984fb1be0f16d0a74e.png\",\r\n        \"profilePhotoUrl\": \"https://www.remove.bg/assets/start_remove-79a4598a05a77ca999df1dcb434160994b6fde2c3e9101984fb1be0f16d0a74e.png\",\r\n        \"videoName\": null,\r\n        \"videoUrl\": \"\",\r\n        \"cvName\": null,\r\n        \"cvUrl\": \"\",\r\n        \"summary\": null,\r\n        \"description\": null,\r\n        \"linkedAccounts\": [],\r\n        \"jobSeekingStatus\": {},\r\n        \"languages\": [],\r\n        \"skills\": [],\r\n        \"educations\": [],\r\n        \"certifications\": [],\r\n        \"experiences\": []\r\n    }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update or Add personal summary",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4238349e-2129-42c1-a547-4df57c8e7417",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Message is Updated\", function () {\r",
															"    pm.expect(jsonData.message).to.include(\"Updated\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"summary\": \"{{summary}}\"\r\n}\r\n",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/summary",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"summary"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check if summary has been  updated successfully",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2f04aeb9-f302-4f26-89b0-c6d181441c1c",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has OK\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Content-Type is json\", function () {",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Check if summary has been  added successfully\", function () {",
															"    pm.expect(jsonData.profile.summary).to.eql(pm.collectionVariables.get(\"summary\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "",
														"type": "text",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl_api}}/api/profile",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Update or Add personal summary",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4238349e-2129-42c1-a547-4df57c8e7417",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type is json\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Message is Updated\", function () {\r",
													"    pm.expect(jsonData.message).to.include(\"Updated\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"summary\": \"{{summary}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_api}}/api/profile/summary",
											"host": [
												"{{baseUrl_api}}"
											],
											"path": [
												"api",
												"profile",
												"summary"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update or Add personal summary with invalid property",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4238349e-2129-42c1-a547-4df57c8e7417",
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type is json\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Message is 'invalid'\", function () {\r",
													"    pm.expect(jsonData.message).to.include(\"invalid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"summary1\": \"{{summary}}\"\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_api}}/api/profile/summary",
											"host": [
												"{{baseUrl_api}}"
											],
											"path": [
												"api",
												"profile",
												"summary"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update or Add personal summary with invalid value",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4238349e-2129-42c1-a547-4df57c8e7417",
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type is json\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Message is 'invalid'\", function () {\r",
													"    pm.expect(jsonData.message).to.include(\"invalid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"summary\": null\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_api}}/api/profile/summary",
											"host": [
												"{{baseUrl_api}}"
											],
											"path": [
												"api",
												"profile",
												"summary"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update or Add personal summary without autorization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3600297f-a0f4-44e9-89b6-7577fd82d86c",
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(\"Status code name has Unauthorized\", function () {",
													"    pm.response.to.have.status(\"Unauthorized\");",
													"});",
													"",
													"pm.test(\"WWW-Authenticate is present\", function () {",
													"    pm.response.to.have.header(\"WWW-Authenticate\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_api}}/api/profile/summary",
											"host": [
												"{{baseUrl_api}}"
											],
											"path": [
												"api",
												"profile",
												"summary"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update or Add personal summary without permission",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3600297f-a0f4-44e9-89b6-7577fd82d86c",
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(\"Status code name has Forbidden\", function () {",
													"    pm.response.to.have.status(\"Forbidden\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_employer}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_api}}/api/profile/summary",
											"host": [
												"{{baseUrl_api}}"
											],
											"path": [
												"api",
												"profile",
												"summary"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "JobSeekingStatus",
							"item": [
								{
									"name": "CRUD",
									"item": [
										{
											"name": "Clear profile data",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "c67770f4-84c0-49c7-b296-b0d0f42c10e1",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has OK\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Content-Type is json\", function () {",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Response has success\", function () {",
															"    pm.expect(jsonData.success).to.eql(true);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n        \"id\": \"{{id_talent}}\",\r\n        \"firstName\": \"talent\",\r\n        \"middleName\": null,\r\n        \"lastName\": \"MVP\",\r\n        \"username\": \"talent\",\r\n        \"gender\": null,\r\n        \"email\": \"talent@mvp.studio\",\r\n        \"phone\": null,\r\n        \"mobilePhone\":null,\r\n        \"isMobilePhoneVerified\": true,\r\n        \"address\": {\r\n            \"number\": \"\",\r\n            \"street\": \"\",\r\n            \"suburb\": \"\",\r\n            \"postCode\": 0,\r\n            \"city\": \"\",\r\n            \"country\": \"\"\r\n        },\r\n        \"nationality\": null,\r\n        \"visaStatus\": null,\r\n        \"visaExpiryDate\": null,\r\n        \"profilePhoto\": \"start_remove-79a4598a05a77ca999df1dcb434160994b6fde2c3e9101984fb1be0f16d0a74e.png\",\r\n        \"profilePhotoUrl\": \"https://www.remove.bg/assets/start_remove-79a4598a05a77ca999df1dcb434160994b6fde2c3e9101984fb1be0f16d0a74e.png\",\r\n        \"videoName\": null,\r\n        \"videoUrl\": \"\",\r\n        \"cvName\": null,\r\n        \"cvUrl\": \"\",\r\n        \"summary\": null,\r\n        \"description\": null,\r\n        \"linkedAccounts\": [],\r\n        \"jobSeekingStatus\": {},\r\n        \"languages\": [],\r\n        \"skills\": [],\r\n        \"educations\": [],\r\n        \"certifications\": [],\r\n        \"experiences\": []\r\n    }",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile"
													]
												}
											},
											"response": []
										},
										{
											"name": "Update job seeking status",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7a0dd435-70dc-41cd-9ea1-42472ace7c94",
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.response.to.have.status(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Status code name has OK\", function () {\r",
															"    pm.response.to.have.status(\"OK\");\r",
															"});\r",
															"\r",
															"pm.test(\"Content-Type is json\", function () {\r",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Message is Updated\", function () {\r",
															"    pm.expect(jsonData.message).to.include(\"Updated\");\r",
															"});\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{token_talent}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"value": "application/json",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"status\": \"{{jobseekingstatus_status}}\",\r\n  \"availableDate\": \"{{jobseekingstatus_availableDate}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl_api}}/api/profile/jobSeekingStatus",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile",
														"jobSeekingStatus"
													]
												}
											},
											"response": []
										},
										{
											"name": "Check if jobseekingstatus has been  updated successfully",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2f04aeb9-f302-4f26-89b0-c6d181441c1c",
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Status code name has OK\", function () {",
															"    pm.response.to.have.status(\"OK\");",
															"});",
															"",
															"pm.test(\"Content-Type is json\", function () {",
															"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
															"});",
															"",
															"var jsonData = pm.response.json();",
															"",
															"pm.test(\"Check if jobseekingstatus has been  added successfully\", function ()",
															"{",
															"    pm.expect(jsonData.profile.jobSeekingStatus.status).to.eql(pm.collectionVariables.get(\"jobseekingstatus_status\"));",
															"     pm.expect(jsonData.profile.jobSeekingStatus.availableDate).to.eql(pm.collectionVariables.get(\"jobseekingstatus_availableDate\"));",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "",
														"type": "text",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl_api}}/api/profile",
													"host": [
														"{{baseUrl_api}}"
													],
													"path": [
														"api",
														"profile"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Update job seeking status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a0dd435-70dc-41cd-9ea1-42472ace7c94",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type is json\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Message is Updated\", function () {\r",
													"    pm.expect(jsonData.message).to.include(\"Updated\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_talent}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"status\": \"{{jobseekingstatus_status}}\",\r\n  \"availableDate\": \"{{jobseekingstatus_availableDate}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_api}}/api/profile/jobSeekingStatus",
											"host": [
												"{{baseUrl_api}}"
											],
											"path": [
												"api",
												"profile",
												"jobSeekingStatus"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update job seeking status with invalid property",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a0dd435-70dc-41cd-9ea1-42472ace7c94",
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type is json\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Message is 'invalid'\", function () {\r",
													"    pm.expect(jsonData.message).to.include(\"invalid\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_talent}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"status1\": \"{{jobseekingstatus_status}}\",\r\n  \"availableDate1\": \"{{jobseekingstatus_availableDate}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_api}}/api/profile/jobSeekingStatus",
											"host": [
												"{{baseUrl_api}}"
											],
											"path": [
												"api",
												"profile",
												"jobSeekingStatus"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update job seeking status with invalid value",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a0dd435-70dc-41cd-9ea1-42472ace7c94",
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"pm.test(\"Content-Type is json\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Message is 'Error'\", function () {\r",
													"    pm.expect(jsonData.message).to.include(\"Error\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_talent}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"status\": \"123\",\r\n  \"availableDate\": \"123\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_api}}/api/profile/jobSeekingStatus",
											"host": [
												"{{baseUrl_api}}"
											],
											"path": [
												"api",
												"profile",
												"jobSeekingStatus"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update job seeking status without authorization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a0dd435-70dc-41cd-9ea1-42472ace7c94",
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has Unauthorized\", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"\r",
													"pm.test(\"WWW-Authenticate is present\", function () {\r",
													"    pm.response.to.have.header(\"WWW-Authenticate\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_api}}/api/profile/jobSeekingStatus",
											"host": [
												"{{baseUrl_api}}"
											],
											"path": [
												"api",
												"profile",
												"jobSeekingStatus"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update job seeking status without permission",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a0dd435-70dc-41cd-9ea1-42472ace7c94",
												"exec": [
													"pm.test(\"Status code is 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has Forbidden\", function () {\r",
													"    pm.response.to.have.status(\"Forbidden\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_employer}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_api}}/api/profile/jobSeekingStatus",
											"host": [
												"{{baseUrl_api}}"
											],
											"path": [
												"api",
												"profile",
												"jobSeekingStatus"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Info-Need Update",
							"item": [
								{
									"name": "Add the talent info",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "94623295-0593-4683-b261-20039fe64826",
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Status code name has OK\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/json",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"personId\": \"5e606e7014d42500068dc0a8\",\r\n  \"description\": \"{{info_description}}\"\r\n}\r\n\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_api}}/api/profile/info",
											"host": [
												"{{baseUrl_api}}"
											],
											"path": [
												"api",
												"profile",
												"info"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get the talent info",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl_api}}/api/profile/info",
											"host": [
												"{{baseUrl_api}}"
											],
											"path": [
												"api",
												"profile",
												"info"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Images-Need Update",
							"item": [
								{
									"name": "Get talent image",
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl_api}}/api/profile/Images?id={{id_talent}}",
											"host": [
												"{{baseUrl_api}}"
											],
											"path": [
												"api",
												"profile",
												"Images"
											],
											"query": [
												{
													"key": "id",
													"value": "{{id_talent}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update talent image",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_talent}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "profilePhoto",
													"type": "file",
													"src": "Capture.PNG"
												}
											],
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl_api}}/api/profile/Images",
											"host": [
												"{{baseUrl_api}}"
											],
											"path": [
												"api",
												"profile",
												"Images"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "CV-Need Update",
							"item": [
								{
									"name": "Add the cv",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_talent}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "",
													"type": "file",
													"src": "CV.docx"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl_api}}/api/profile/cv",
											"host": [
												"{{baseUrl_api}}"
											],
											"path": [
												"api",
												"profile",
												"cv"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Videos-Need Update",
							"item": [
								{
									"name": "Get the talent video",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_talent}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl_api}}/api/profile/videos",
											"host": [
												"{{baseUrl_api}}"
											],
											"path": [
												"api",
												"profile",
												"videos"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create the talent video",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_talent}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "",
													"type": "file",
													"src": []
												}
											]
										},
										"url": {
											"raw": "{{baseUrl_api}}/api/profile/videos",
											"host": [
												"{{baseUrl_api}}"
											],
											"path": [
												"api",
												"profile",
												"videos"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Export to Google doc-Need Update",
							"item": [
								{
									"name": "Export profile to google doc",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token_talent}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "id",
												"type": "text",
												"value": "5e5dc35e4e96ce00060436e4"
											}
										],
										"url": {
											"raw": "{{baseUrl_api}}/api/profile/google/doc/export\n",
											"host": [
												"{{baseUrl_api}}"
											],
											"path": [
												"api",
												"profile",
												"google",
												"doc",
												"export\n"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{token_talent}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "40f3c806-52ef-4eec-af1f-523efc2a15c6",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0fcd1e00-e78f-461d-9903-399f60b25d61",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Employer",
					"item": [
						{
							"name": "Get profile details",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3fb6d6f4-a625-47b1-981b-48bc071e3536",
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Status code name has OK\", function () {",
											"    pm.response.to.have.status(\"OK\");",
											"});",
											"",
											"pm.test(\"Content-Type is json\", function () {",
											"    pm.response.to.have.header(\"Content-Type\", \"application/json; charset=utf-8\");",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.environment.set(\"id_employer\", jsonData.profile.id);",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl_api}}/api/profile/employer",
									"host": [
										"{{baseUrl_api}}"
									],
									"path": [
										"api",
										"profile",
										"employer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create profile details",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_employer}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"{{id_employer}}\",\n    \"companyContact\": {\n        \"name\": \"mvp\",\n        \"email\": \"employer.ivy@mvp.studio\",\n        \"phone\": \"1234567\",\n        \"firstName\": null,\n        \"lastName\": null,\n        \"address\": {\n            \"number\": \"\",\n            \"street\": \"\",\n            \"suburb\": \"\",\n            \"postCode\": 0,\n            \"city\": \"\",\n            \"country\": \"\"\n        },\n        \"location\": {\n            \"number\": \"\",\n            \"street\": \"\",\n            \"suburb\": \"\",\n            \"postCode\": 0,\n            \"city\": \"\",\n            \"country\": \"\"\n        }\n    },\n    \"primaryContact\": {\n        \"name\": \"Ivy Guo\",\n        \"email\": \"employer.ivy@mvp.studio\",\n        \"phone\": null,\n        \"firstName\": \"Ivy\",\n        \"lastName\": \"Guo\",\n        \"address\": {\n            \"number\": \"\",\n            \"street\": \"\",\n            \"suburb\": \"\",\n            \"postCode\": 0,\n            \"city\": \"\",\n            \"country\": \"\"\n        },\n        \"location\": {\n            \"number\": \"\",\n            \"street\": \"\",\n            \"suburb\": \"\",\n            \"postCode\": 0,\n            \"city\": \"\",\n            \"country\": \"\"\n        }\n    },\n    \"profilePhoto\": null,\n    \"profilePhotoUrl\": null,\n    \"username\": \"Ivy\",\n    \"videoName\": \"myvideo\",\n    \"videoUrl\": \"https://www.youtube.com/watch?v=5L6xyaeiV58\",\n    \"skills\": [],\n    \"displayProfile\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl_api}}/api/profile/employer",
									"host": [
										"{{baseUrl_api}}"
									],
									"path": [
										"api",
										"profile",
										"employer"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{token_employer}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3ebff591-f3c3-4910-8157-f5aaa50ca2ac",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c95ed57b-91e6-49b8-af82-9f38a5ecc906",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Recruiter",
					"item": [
						{
							"name": "Get profle details",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_recruiter}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl_api}}/api/profile/recruiter",
									"host": [
										"{{baseUrl_api}}"
									],
									"path": [
										"api",
										"profile",
										"recruiter"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create profile details",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token_recruiter}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"5e5dc40c4e96ce00060436e8\",\n    \"companyContact\": {\n        \"name\": \"mvp\",\n        \"email\": \"recruiter.ivy@mvp.studio\",\n        \"phone\": \"1234567\",\n        \"firstName\": null,\n        \"lastName\": null,\n        \"address\": {\n            \"number\": \"\",\n            \"street\": \"\",\n            \"suburb\": \"\",\n            \"postCode\": 0,\n            \"city\": \"\",\n            \"country\": \"\"\n        },\n        \"location\": {\n            \"number\": \"\",\n            \"street\": \"\",\n            \"suburb\": \"\",\n            \"postCode\": 0,\n            \"city\": \"\",\n            \"country\": \"\"\n        }\n    },\n    \"primaryContact\": {\n        \"name\": \"Ivy Guo\",\n        \"email\": \"employer.ivy@mvp.studio\",\n        \"phone\": null,\n        \"firstName\": \"Ivy\",\n        \"lastName\": \"Guo\",\n        \"address\": {\n            \"number\": \"\",\n            \"street\": \"\",\n            \"suburb\": \"\",\n            \"postCode\": 0,\n            \"city\": \"\",\n            \"country\": \"\"\n        },\n        \"location\": {\n            \"number\": \"\",\n            \"street\": \"\",\n            \"suburb\": \"\",\n            \"postCode\": 0,\n            \"city\": \"\",\n            \"country\": \"\"\n        }\n    },\n    \"profilePhoto\": null,\n    \"profilePhotoUrl\": null,\n    \"username\": \"Ivy\",\n    \"videoName\": null,\n    \"videoUrl\": \"\",\n    \"skills\": [],\n    \"displayProfile\": false\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl_api}}/api/profile/employer",
									"host": [
										"{{baseUrl_api}}"
									],
									"path": [
										"api",
										"profile",
										"employer"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"auth": {
				"type": "noauth"
			},
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "3eec2706-bbf8-4b36-9361-482942271fcd",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0525eadb-cf7a-4525-a7a5-d7243a598e65",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "a987ae0f-7e7a-4766-af3c-6fbf74a65519",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "ce7fa3ce-1dcb-4586-9752-0c44a6bba591",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "fcabbeda-1c2b-46e7-88e8-9aadf0477724",
			"key": "id_language",
			"value": "5e675840ea35f80006a05706",
			"type": "string"
		},
		{
			"id": "7b212d7d-14d4-48f7-b86f-e172489aa0f3",
			"key": "language_name",
			"value": "English",
			"type": "string"
		},
		{
			"id": "a8dd0ec8-a830-45b7-b740-94d75346a0c5",
			"key": "language_level",
			"value": "Basic",
			"type": "string"
		},
		{
			"id": "b74884a1-8642-4ceb-bf77-347e333cec23",
			"key": "language_name_updated",
			"value": "Chinese",
			"type": "string"
		},
		{
			"id": "6f0b4bb5-ad54-4c47-b9ec-1bbc5f33fd94",
			"key": "language_level_updated",
			"value": "Fluent",
			"type": "string"
		},
		{
			"id": "fae265b0-1a21-4fe5-b82e-df9aea9ef03f",
			"key": "id_skill",
			"value": "5e695ebccc86f400064eb900",
			"type": "string"
		},
		{
			"id": "015172a7-29c4-472e-8fc8-1a06611426e6",
			"key": "skill_name",
			"value": "Selenium",
			"type": "string"
		},
		{
			"id": "3e54a4fc-d76f-4b3b-9647-ebe10ca1c1ce",
			"key": "skill_level",
			"value": "Beginner",
			"type": "string"
		},
		{
			"id": "dd1568a6-ef42-4571-a413-bd3ac5740ca2",
			"key": "skill_name_updated",
			"value": "C#",
			"type": "string"
		},
		{
			"id": "0e38dcf0-f43e-4d4a-8901-fa2cee1a65f2",
			"key": "skill_level_updated",
			"value": "Expert",
			"type": "string"
		},
		{
			"id": "5b2b0a04-24dc-40b3-a413-bc439826ff91",
			"key": "id_experience",
			"value": "5e675936ea35f80006a05717",
			"type": "string"
		},
		{
			"id": "fb10a3f9-6229-422f-8335-4a8c2d6a53c0",
			"key": "experience_company",
			"value": "Google",
			"type": "string"
		},
		{
			"id": "463df14f-6c76-440b-a6d3-c5b01f6afbe2",
			"key": "experience_position",
			"value": "Developer",
			"type": "string"
		},
		{
			"id": "6062f39e-8a2c-46cb-833f-05175e1c533d",
			"key": "experience_responsibilities",
			"value": "coding",
			"type": "string"
		},
		{
			"id": "33e6915e-ea99-4342-a3fb-e7fa3014acf5",
			"key": "experience_startdate",
			"value": "2016-03-05T02:11:53.747Z",
			"type": "string"
		},
		{
			"id": "c10bc420-28f9-4a14-ba80-6eea70afdfcf",
			"key": "experience_enddate",
			"value": "2018-03-05T02:11:53.747Z",
			"type": "string"
		},
		{
			"id": "75eaa4bf-8f3f-491f-b93a-beff1fe36684",
			"key": "experience_company_updated",
			"value": "Microsoft",
			"type": "string"
		},
		{
			"id": "86e276d1-c646-4a41-b846-48609259f883",
			"key": "experience_position_updated",
			"value": "Tester",
			"type": "string"
		},
		{
			"id": "4d5323c5-4021-42c9-9407-1967402fec74",
			"key": "experience_responsibilities_updated",
			"value": "testing",
			"type": "string"
		},
		{
			"id": "21d4e636-125f-4f57-a024-e707c7e5f0a9",
			"key": "experience_startdate_updated",
			"value": "2019-07-27T08:30:06.936Z",
			"type": "string"
		},
		{
			"id": "67083d1c-ccd5-42c0-a9c5-5f13bb432445",
			"key": "experience_enddate_updated",
			"value": "2020-09-27T08:30:08.427Z",
			"type": "string"
		},
		{
			"id": "291693a3-76c3-4290-9018-a27394f16648",
			"key": "id_certification",
			"value": null,
			"type": "any"
		},
		{
			"id": "8c060b78-ec2b-49fd-a0fe-abf3352a374e",
			"key": "certificationName",
			"value": "ISTQB",
			"type": "string"
		},
		{
			"id": "8dcc6727-2a61-4837-b105-f32bfbfd325e",
			"key": "certificationFrom",
			"value": "ISTQB",
			"type": "string"
		},
		{
			"id": "f5e046fb-ed33-4952-b1a3-a7f5fa401ec0",
			"key": "certificationYear",
			"value": "2020",
			"type": "string"
		},
		{
			"id": "edb6aef2-7fde-4e30-aae8-81553f2d5c59",
			"key": "certificationName_updated",
			"value": "Software Developer",
			"type": "string"
		},
		{
			"id": "43d03625-b794-4715-93ae-6ccd932eabb8",
			"key": "certificationFrom_updated",
			"value": "Industry Connect",
			"type": "string"
		},
		{
			"id": "dadfbc93-96e4-4c03-ab92-f6c8a671f88e",
			"key": "certificationYear_updated",
			"value": "2019",
			"type": "string"
		},
		{
			"id": "60ac091f-5507-4091-bb7b-776f8753e4ed",
			"key": "id_education",
			"value": "5e676042ea35f80006a05735",
			"type": "string"
		},
		{
			"id": "a953b32f-5ca1-4cca-968c-4b02c1ee7383",
			"key": "education_country",
			"value": "New Zealand",
			"type": "string"
		},
		{
			"id": "2502f364-59a2-4f66-9a6f-71733449859f",
			"key": "education_instituteName",
			"value": "Auckland University",
			"type": "string"
		},
		{
			"id": "efc8e3d9-4cff-4762-8781-6b31095bb8cf",
			"key": "education_title",
			"value": "Computer Science",
			"type": "string"
		},
		{
			"id": "df6d6996-5ae5-4d4e-8047-0632d610ac12",
			"key": "education_degree",
			"value": "Bachelor",
			"type": "string"
		},
		{
			"id": "3e85b0ed-8e12-4f21-ba32-9b145eeeea76",
			"key": "education_graduationOn",
			"value": "2020-03-09T08:06:12.648Z",
			"type": "string"
		},
		{
			"id": "dd0911d5-a62b-4c7f-b63c-35df4b8ee49f",
			"key": "education_startOn",
			"value": "2017-03-09T08:06:12.648Z",
			"type": "string"
		},
		{
			"id": "3500b8c7-3263-4b07-8068-e3c0ad16a7c3",
			"key": "education_from",
			"value": "2017-03-09T08:06:12.648Z",
			"type": "string"
		},
		{
			"id": "27206861-5f16-4c61-be0a-3ab6f591ede0",
			"key": "education_end",
			"value": "2020-03-09T08:06:12.648Z",
			"type": "string"
		},
		{
			"id": "85108777-2c7e-4c28-a4b0-f3dbeedf0f68",
			"key": "education_country_updated",
			"value": "Australia",
			"type": "string"
		},
		{
			"id": "0dd25b36-91b5-4cc2-8fec-b06a17598d76",
			"key": "education_instituteName_updated",
			"value": "Melbourne",
			"type": "string"
		},
		{
			"id": "9e5ef633-4b09-4223-a23c-0874a824e478",
			"key": "education_title_updated",
			"value": "Information Technology",
			"type": "string"
		},
		{
			"id": "9c5f53ad-63de-4e11-8f08-133471c65e0d",
			"key": "education_degree_updated",
			"value": "Master",
			"type": "string"
		},
		{
			"id": "6380f44e-168d-499b-beb1-cc87773c0e8f",
			"key": "education_graduationOn_updated",
			"value": "2015-03-09T08:06:12.648Z",
			"type": "string"
		},
		{
			"id": "cb317257-e14e-454a-b645-debd7b0ca0fa",
			"key": "education_startOn_updated",
			"value": "2012-03-09T08:06:12.648Z",
			"type": "string"
		},
		{
			"id": "59da5b4e-d2b3-4ef3-8a96-24a1d70b6e4b",
			"key": "education_from_updated",
			"value": "2012-03-09T08:06:12.648Z",
			"type": "string"
		},
		{
			"id": "fffa3b6f-96d7-4188-b1e8-9fd60e0a8043",
			"key": "education_end_updated",
			"value": "2015-03-09T08:06:12.648Z",
			"type": "string"
		},
		{
			"id": "5cbbe327-15a6-4183-965e-c0bf19a18fd9",
			"key": "info_description",
			"value": "I am a talent",
			"type": "string"
		},
		{
			"id": "7d23d9f2-9e55-43c5-a315-f141012f4aa0",
			"key": "summary",
			"value": " I am a developer",
			"type": "string"
		},
		{
			"id": "25e61229-d1dd-4348-8a39-2e169db03285",
			"key": "jobseekingstatus_status",
			"value": "Open to Opptunity",
			"type": "string"
		},
		{
			"id": "bb60c7f1-6a48-4aba-b646-b110610501e3",
			"key": "jobseekingstatus_availableDate",
			"value": "2020-02-26T04:42:47.206Z",
			"type": "string"
		},
		{
			"id": "dc202e67-8abe-4c87-be8c-d40c2e7328dc",
			"key": "firstName",
			"value": "Test",
			"type": "string"
		},
		{
			"id": "46a580af-7a7b-402e-b980-786440657e11",
			"key": "middleName",
			"value": "Talent",
			"type": "string"
		},
		{
			"id": "cb96f8f4-d9a1-4333-8b4f-7dec25fa6e07",
			"key": "lastName",
			"value": "Mvp",
			"type": "string"
		},
		{
			"id": "7ec4d8fb-240f-487b-b6ff-64e5c331b245",
			"key": "gender",
			"value": "female",
			"type": "string"
		},
		{
			"id": "3e14660e-3509-4b88-855a-23c67dcdf6c6",
			"key": "email",
			"value": "testtalent@mvp.studio",
			"type": "string"
		},
		{
			"id": "547c3bf6-1b10-4419-a525-9a082eacc59c",
			"key": "phone",
			"value": "1234567890",
			"type": "string"
		},
		{
			"id": "870616b4-190c-46a5-a8c8-10972a7af14f",
			"key": "mobilePhone",
			"value": "1234567890",
			"type": "string"
		},
		{
			"id": "eeb4584e-65bd-41a4-b073-56da2cc6a5b1",
			"key": "isMobilePhoneVerified",
			"value": "true",
			"type": "string"
		},
		{
			"id": "a640d15b-2b75-49f9-8490-bb72e219ee8b",
			"key": "address_number",
			"value": "59",
			"type": "string"
		},
		{
			"id": "cf1a9972-3466-4bef-bc97-066f6b3131b1",
			"key": "address_street",
			"value": "Queens Street",
			"type": "string"
		},
		{
			"id": "6541d72c-649b-4b26-830c-5d9f0d619f36",
			"key": "address_suburb",
			"value": "Auckland",
			"type": "string"
		},
		{
			"id": "916d1e6d-68b7-49b3-83ef-f5d955b8b7f6",
			"key": "address_postCode",
			"value": "0123",
			"type": "string"
		},
		{
			"id": "030af61f-b517-4fb1-ab30-a9d2af0f0a36",
			"key": "address_city",
			"value": "Auckland",
			"type": "string"
		},
		{
			"id": "3d0965d6-af72-4c75-b5bd-80e0850cc2c2",
			"key": "address_country",
			"value": "New Zealand",
			"type": "string"
		},
		{
			"id": "5210208d-b52c-4e35-bc30-94febcfde911",
			"key": "nationality",
			"value": "New Zealand",
			"type": "string"
		},
		{
			"id": "19fefbc9-d022-47fa-afeb-8e9e141014b6",
			"key": "visaStatus",
			"value": "Working Visa",
			"type": "string"
		},
		{
			"id": "19d139b6-8ed4-4534-858d-c5cc464627c1",
			"key": "visaExpiryDate",
			"value": "2022-02-26T04:42:47.206Z",
			"type": "string"
		},
		{
			"id": "a3b1b491-afb0-4520-ba20-d3dadceb1642",
			"key": "linkedAccounts_organisation",
			"value": "GitHub",
			"type": "string"
		},
		{
			"id": "f5f952f1-98c5-497b-8f40-464a0e84acd8",
			"key": "linkedAccounts_token",
			"value": "",
			"type": "string"
		},
		{
			"id": "d4c457bf-fa09-4d9e-ae99-bf9230142ae2",
			"key": "linkedAccounts_url",
			"value": "www.github.com",
			"type": "string"
		},
		{
			"id": "49fc34b6-8aca-4cd6-8722-32afa5b9111f",
			"key": "linkedAccounts_linkedTime",
			"value": "2020-03-10T00:18:19.312Z",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}